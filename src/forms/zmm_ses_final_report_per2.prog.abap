REPORT ZMM_SES_FINAL_REPORT_PER2.



***********************************************************************
* Title         : Service Entry Sheet                                 *
*                                                                     *
* Form          : ZMM_SES_FM                                          *
*                                                                     *
* T-code        : ML83                                                *
*                                                                     *
* Package       : ZMM                                                 *
*                                                                     *
* Creation Date : 30/04/2015                                          *
*                                                                     *
* Author        : CIC Egypt - Bahaa hodhod                            *
*                 Bahaa_hodhod@windowslive.com                        *
***********************************************************************


DATA: FM_NAME           TYPE RS38L_FNAM,
      FP_DOCPARAMS      TYPE SFPDOCPARAMS,
      FP_OUTPUTPARAMS   TYPE SFPOUTPUTPARAMS.

DATA: LV_VENDOR_NO            TYPE EKKO-LIFNR.
DATA: LV_VENDOR_NAME          TYPE LFA1-NAME1.
DATA: LV_CONT_REF             TYPE EKKO-IHREZ.
DATA: LV_CONTRACT_NO          TYPE EKPO-EBELN.
DATA: LV_CONTRACT_ITEM        TYPE C LENGTH 30.
DATA: LV_CONTRACT_DESC        TYPE EKPO-TXZ01.
DATA: LV_TOTAL_CONTRACT_VALUE TYPE EKPO-NETWR.
DATA: LV_PROJECT_NO           TYPE EKPO-LGORT.
DATA: LV_PROJECT_NAME         TYPE T001L-LGOBE.
DATA: LV_SES_NO               TYPE ESSR-LBLNI.
DATA: LV_SES_DESC             TYPE ESSR-TXZ01.
DATA: LV_SES_DATE             TYPE ESSR-ERDAT.
DATA: RETENTION               TYPE EKKO-RETPC.
DATA: LV_RETENTION            TYPE SNETWR.
DATA: LV_TOTAL_AMOUNT         TYPE SNETWR.
DATA: LV_NET_AMOUNT           TYPE SNETWR.
DATA: LV_TOTAL_ACCOMP         TYPE SNETWR.
DATA: LV_NET_ACCOMP           TYPE SNETWR.
DATA: LV_RETENTION_ACCOMP     TYPE SNETWR.

DATA: PREV_SUB_PACKNO         TYPE ESLL-SUB_PACKNO.
DATA: PREV_PACKNO             TYPE ESSR-LBLNI.
DATA: TOTAL_VALUE             TYPE ESLL-NETWR.

DATA: IT_PREV_ESLL            TYPE TABLE OF ESLL,
      WA_PREV_ESLL            TYPE ESLL.
DATA: CURR_SUB_PACKNO         TYPE ESLL-SUB_PACKNO.
DATA: PREV_LBLNI              TYPE ESSR-LBLNI.
DATA: IT_CURR_ESLL            TYPE TABLE OF ESLL,
      WA_CURR_ESLL            TYPE ESLL.
DATA: IT_CURR_ESLL_TOT        TYPE TABLE OF ESLL,
      WA_CURR_ESLL_TOT        TYPE ESLL.
DATA: IT_ESSR                 TYPE TABLE OF ESSR,
      WA_ESSR                 TYPE ESSR.

DATA: LT_LFA1 TYPE TABLE OF LFA1,
      LS_LFA1 TYPE LFA1.

DATA: IT_ESLL_ACCOMP_TEMP TYPE TABLE OF ESLL,
      IT_ESSR_ACCOMP      TYPE TABLE OF ESSR,
      IT_ESLL_ACCOMP      TYPE TABLE OF ESLL,
      WA_ESLL_ACCOMP      TYPE ESLL.

DATA: IT_OUTPUT       TYPE TABLE OF ZMM_SES.
DATA: WA_OUTPUT  TYPE ZMM_SES.
DATA: LT_SERV_GROUP   TYPE TABLE OF T023T,
      LS_SERV_GROUP   TYPE T023T.

DATA: NUMBER TYPE INT1.
DATA: LT_ESLL_MG TYPE TABLE OF ESLL.
DATA: LT_T023T TYPE TABLE OF T023T,
      LS_T023T TYPE T023T.


DATA: LT_EKPO TYPE TABLE OF EKPO,
      LS_EKPO TYPE EKPO,
      LT_EKKO TYPE TABLE OF EKKO,
      LS_EKKO TYPE EKKO.
DATA: LT_ESLH TYPE TABLE OF ESLH,
      LS_ESLH TYPE ESLH.
DATA: LT_ESLL_ALL_SERV TYPE TABLE OF ESLL,
      LS_ESLL_ALL_SERV TYPE ESLL.
DATA: LT_ESSR TYPE TABLE OF ESSR,
      LS_ESSR TYPE ESSR.
DATA: LT_ESSR_PREV TYPE TABLE OF ESSR,
      LS_ESSR_PREV TYPE ESSR.
DATA: LT_ESLL_TEMP TYPE TABLE OF ESLL,
      LS_ESLL_TEMP TYPE ESLL.
DATA: LT_ESLL_PREV_TEMP TYPE TABLE OF ESLL,
      LS_ESLL_PREV_TEMP TYPE ESLL.
DATA: LT_ESLL_PREV TYPE TABLE OF ESLL,
      LS_ESLL_PREV TYPE ESLL.
DATA: LT_ESLL TYPE TABLE OF ESLL,
      LS_ESLL TYPE ESLL.
DATA: LT_ESLL_UNP TYPE TABLE OF ESLL,
      LS_ESLL_UNP TYPE ESLL.

DATA: LT_PO_SES TYPE TABLE OF ESSR,
      LS_PO_SES TYPE ESSR.
DATA: LT_SES_SERV_LAST_UPD TYPE TABLE OF ESLL,
      LS_SES_SERV_LAST_UPD TYPE ESLL.


DATA: LT_ESSR_CURRENT TYPE TABLE OF ESSR.
DATA: LT_ESSR_PREVIOUS TYPE TABLE OF ESSR.

DATA: BEGIN OF F4_EKPO OCCURS 0,
  EBELN TYPE EKPO-EBELN,
  EBELP TYPE EKPO-EBELP,
  END OF F4_EKPO.

DATA: F4_EKKO TYPE TABLE OF EKKO.

DATA: BEGIN OF F4_VENDOR OCCURS 0,
  LIFNR TYPE LFA1-LIFNR,
  NAME1 TYPE LFA1-NAME1,
  END OF F4_VENDOR.

DATA: SES_STR_DATE TYPE ESSR-BUDAT,
      SES_END_DATE TYPE ESSR-BUDAT.

DATA: MONTH_NAME TYPE C LENGTH 20.
DATA: COUNTER TYPE N LENGTH 3.
DATA: SES_NOT_APPROVED TYPE C LENGTH 2000.
TABLES: ESSR,ESLL,BKPF,BSEG,EKKO,EKPO,ZMM_SRV_UPLD.

DATA: LV_EXTSRVNO TYPE ESLL-EXTSRVNO.

DATA: BEGIN OF LT_ALL_DATA OCCURS 0,
  EBELN            TYPE ESSR-EBELN,
  EBELP            TYPE ESSR-EBELP,
  LBLNI            TYPE ESSR-LBLNI,
  PACKNO           TYPE ESSR-PACKNO,
  SUB_PACKNO       TYPE ESLL-SUB_PACKNO,
  BUDAT            TYPE ESSR-BUDAT,
  TXZ01            TYPE ESSR-TXZ01,
  LWERT            TYPE ESSR-LWERT,
  WAERS            TYPE ESSR-WAERS,
  SRVPOS           TYPE ESLL-SRVPOS,
  INTROW           TYPE ESLL-INTROW,
  EXTROW           TYPE ESLL-EXTROW,
  KTEXT1           TYPE ESLL-KTEXT1,
  MENGE            TYPE ESLL-MENGE,
  MEINS            TYPE ESLL-MEINS,
  BRTWR            TYPE ESLL-BRTWR,
  NETWR            TYPE ESLL-NETWR,
  MATKL            TYPE ESLL-MATKL,
  TBTWR            TYPE ESLL-TBTWR,
  FORMELNR         TYPE ESLL-FORMELNR,
  FRMVAL1          TYPE ESLL-FRMVAL1,
  FRMVAL2          TYPE ESLL-FRMVAL2,
  EXTSRVNO         TYPE ESLL-EXTSRVNO,
  TOT_Q            TYPE USERF1_NUM,
  TOT_PT           TYPE USERF2_NUM,
  TOT_PR           TYPE SNETWR,
  Q_CURR           TYPE USERF1_NUM,
  Q_PREV           TYPE USERF1_NUM,
  Q_UPDT           TYPE MENGEV,
  PREV_Q           TYPE C LENGTH 10,
  PREV_PT          TYPE USERF2_NUM,
  PREV_PR          TYPE MENGEV,
  TOTAL_VALUE      TYPE SNETWR,
  USERF2_TXT       TYPE ESLL-USERF2_TXT,
  ITEM_DESC        TYPE EKPO-TXZ01,
  COLOR_IND1       TYPE C LENGTH 1,
  COLOR_IND2       TYPE C LENGTH 1,
END OF LT_ALL_DATA.
DATA: LS_ALL_DATA LIKE LINE OF LT_ALL_DATA.
DATA: LT_ALL_DATA_CURR LIKE LS_ALL_DATA OCCURS 0,
      LS_ALL_DATA_CURR LIKE LINE OF LT_ALL_DATA_CURR.
DATA: LT_ALL_DATA_PREV LIKE LS_ALL_DATA OCCURS 0,
      LS_ALL_DATA_PREV LIKE LINE OF LT_ALL_DATA_PREV.
DATA: LT_ALL_DATA2 LIKE LS_ALL_DATA OCCURS 0,
      LS_ALL_DATA2 LIKE LINE OF LT_ALL_DATA2.
DATA: LT_ALL_DATA3 LIKE LS_ALL_DATA OCCURS 0,
      LS_ALL_DATA3 LIKE LINE OF LT_ALL_DATA3.
DATA: LT_SES_FILTER LIKE LS_ALL_DATA OCCURS 0,
      LS_SES_FILTER LIKE LINE OF LT_SES_FILTER.
DATA: LT_PO_ITEMS LIKE LS_ALL_DATA OCCURS 0,
      LS_PO_ITEMS LIKE LINE OF LT_PO_ITEMS.
DATA: LT_UNPLANNED_SRV LIKE LS_ALL_DATA OCCURS 0,
      LS_UNPLANNED_SRV LIKE LINE OF LT_UNPLANNED_SRV.


DATA: LT_OUTPUT_PO TYPE TABLE OF ZMM_SES_PO,
      LS_OUTPUT_PO LIKE LINE OF LT_OUTPUT_PO.

DATA: LT_OUTPUT_SGROUP TYPE TABLE OF ZMM_SES_SGROUP,
      LS_OUTPUT_SGROUP LIKE LINE OF LT_OUTPUT_SGROUP.


DATA: BEGIN OF LT_EKKO2 OCCURS 0,
  EBELN TYPE BKPF-XBLNR,
  BUKRS TYPE EKKO-BUKRS,
END OF LT_EKKO2.

DATA: LS_EKKO2 LIKE LINE OF LT_EKKO2.

DATA: LT_BKPF TYPE TABLE OF BKPF,
      LS_BKPF TYPE BKPF.
DATA: LT_BSEG TYPE TABLE OF BSEG,
      LS_BSEG TYPE BSEG.
DATA: LT_EKKN TYPE TABLE OF EKKN,
      LS_EKKN TYPE EKKN.
DATA: LT_AUFK TYPE TABLE OF AUFK,
      LS_AUFK TYPE AUFK.
DATA: LT_AFVC TYPE TABLE OF AFVC,
      LS_AFVC TYPE AFVC.

DATA: GT_CRDT_MEM TYPE TABLE OF ZMM_CRDT_MEM.
DATA: GS_CRDT_MEM LIKE LINE OF GT_CRDT_MEM.

DATA: ITEM_NO TYPE C LENGTH 2 VALUE 0.
DATA: DOC_NUM TYPE BSEG-BELNR.
DATA: TAB_INDEX TYPE SY-TABIX.
DATA: $MSG TYPE C LENGTH 100.

DATA: LT_ZMM_SRV_UPLD TYPE TABLE OF ZMM_SRV_UPLD,
      LS_ZMM_SRV_UPLD TYPE ZMM_SRV_UPLD.

DATA: PO_UNIT_PRICE TYPE SBRTWR.
DATA: XPACKNO TYPE ESLH-PACKNO.






SELECT-OPTIONS: S_EBELN FOR   EKKO-EBELN.
SELECT-OPTIONS: S_LIFNR FOR   EKKO-LIFNR NO INTERVALS.
PARAMETERS:     P_LGORT TYPE  EKPO-LGORT OBLIGATORY.

SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 1(33) TEXT-100.
PARAMETERS: P_MONTH TYPE C LENGTH 2 OBLIGATORY.
SELECTION-SCREEN COMMENT 38(8) TEXT-200.
PARAMETERS: P_YEAR  TYPE C LENGTH 4 OBLIGATORY DEFAULT SY-DATUM(4).
SELECTION-SCREEN COMMENT 52(4) TEXT-300.
SELECTION-SCREEN END OF LINE.

SELECT-OPTIONS: S_PERD FOR SY-DATUM.









SELECT SINGLE LGOBE FROM T001L INTO LV_PROJECT_NAME WHERE
LGORT = P_LGORT .



AT SELECTION-SCREEN ON VALUE-REQUEST FOR S_LIFNR-LOW.

  FREE F4_VENDOR.
  SELECT
    LIFNR
   FROM EKKO
   INTO CORRESPONDING FIELDS OF TABLE F4_EKKO
     WHERE EBELN IN S_EBELN.

  SELECT
    LIFRE AS LIFNR
   FROM EKKO
   APPENDING CORRESPONDING FIELDS OF TABLE F4_EKKO
     WHERE  EBELN IN S_EBELN.

  DELETE ADJACENT DUPLICATES FROM F4_EKKO COMPARING LIFNR.


  IF F4_EKKO[] IS NOT INITIAL.
    SELECT
      LIFNR
      NAME1
      FROM LFA1
      INTO CORRESPONDING FIELDS OF TABLE F4_VENDOR
      FOR ALL ENTRIES IN F4_EKKO
      WHERE LIFNR EQ F4_EKKO-LIFNR.
  ENDIF.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
*     DDIC_STRUCTURE  = ''
      RETFIELD        = 'LIFNR'
*     PVALKEY         = ' '
      DYNPPROG        = SY-REPID
      DYNPNR          = SY-DYNNR
      DYNPROFIELD     = 'S_LIFNR-LOW'
*     STEPL           = 0
*     WINDOW_TITLE    =
      VALUE           = ' '
      VALUE_ORG       = 'S'
    TABLES
      VALUE_TAB       = F4_VENDOR
    EXCEPTIONS
      PARAMETER_ERROR = 1
      NO_VALUES_FOUND = 2
      OTHERS          = 3.


AT SELECTION-SCREEN.
  LOOP AT SCREEN.
    IF SCREEN-NAME EQ P_MONTH.
      IF P_MONTH > 12.
        MESSAGE 'Month must be between 1 and 12' TYPE 'S' DISPLAY LIKE 'E'.
        LEAVE LIST-PROCESSING.
      ENDIF.
    ENDIF.
  ENDLOOP.




START-OF-SELECTION.

  CASE P_MONTH.
    WHEN 1.
      CONCATENATE P_YEAR P_MONTH '01' INTO SES_STR_DATE.
      CONCATENATE P_YEAR P_MONTH '31' INTO SES_END_DATE.
      CONCATENATE 'يناير' P_YEAR INTO MONTH_NAME SEPARATED BY SPACE.
    WHEN 2.
      CONCATENATE P_YEAR P_MONTH '01' INTO SES_STR_DATE.
      CONCATENATE P_YEAR P_MONTH '28' INTO SES_END_DATE.
      CONCATENATE 'فبراير' P_YEAR INTO MONTH_NAME SEPARATED BY SPACE.
    WHEN 3.
      CONCATENATE P_YEAR P_MONTH '01' INTO SES_STR_DATE.
      CONCATENATE P_YEAR P_MONTH '31' INTO SES_END_DATE.
      CONCATENATE 'مارس' P_YEAR INTO MONTH_NAME SEPARATED BY SPACE.
    WHEN 4.
      CONCATENATE P_YEAR P_MONTH '01' INTO SES_STR_DATE.
      CONCATENATE P_YEAR P_MONTH '30' INTO SES_END_DATE.
      CONCATENATE 'أبريل' P_YEAR INTO MONTH_NAME SEPARATED BY SPACE.
    WHEN 5.
      CONCATENATE P_YEAR P_MONTH '01' INTO SES_STR_DATE.
      CONCATENATE P_YEAR P_MONTH '31' INTO SES_END_DATE.
      CONCATENATE 'مايو' P_YEAR INTO MONTH_NAME SEPARATED BY SPACE.
    WHEN 6.
      CONCATENATE P_YEAR P_MONTH '01' INTO SES_STR_DATE.
      CONCATENATE P_YEAR P_MONTH '30' INTO SES_END_DATE.
      CONCATENATE 'يونيو' P_YEAR INTO MONTH_NAME SEPARATED BY SPACE.
    WHEN 7.
      CONCATENATE P_YEAR P_MONTH '01' INTO SES_STR_DATE.
      CONCATENATE P_YEAR P_MONTH '31' INTO SES_END_DATE.
      CONCATENATE 'يوليو' P_YEAR INTO MONTH_NAME SEPARATED BY SPACE.
    WHEN 8.
      CONCATENATE P_YEAR P_MONTH '01' INTO SES_STR_DATE.
      CONCATENATE P_YEAR P_MONTH '31' INTO SES_END_DATE.
      CONCATENATE 'أغسطس' P_YEAR INTO MONTH_NAME SEPARATED BY SPACE.
    WHEN 9.
      CONCATENATE P_YEAR P_MONTH '01' INTO SES_STR_DATE.
      CONCATENATE P_YEAR P_MONTH '30' INTO SES_END_DATE.
      CONCATENATE 'سبتمبر' P_YEAR INTO MONTH_NAME SEPARATED BY SPACE.
    WHEN 10.
      CONCATENATE P_YEAR P_MONTH '01' INTO SES_STR_DATE.
      CONCATENATE P_YEAR P_MONTH '31' INTO SES_END_DATE.
      CONCATENATE 'أكتوبر' P_YEAR INTO MONTH_NAME SEPARATED BY SPACE.
    WHEN 11.
      CONCATENATE P_YEAR P_MONTH '01' INTO SES_STR_DATE.
      CONCATENATE P_YEAR P_MONTH '30' INTO SES_END_DATE.
      CONCATENATE 'نوفمبر' P_YEAR INTO MONTH_NAME SEPARATED BY SPACE.
    WHEN 12.
      CONCATENATE P_YEAR P_MONTH '01' INTO SES_STR_DATE.
      CONCATENATE P_YEAR P_MONTH '31' INTO SES_END_DATE.
      CONCATENATE 'ديسيمبر' P_YEAR INTO MONTH_NAME SEPARATED BY SPACE.
    WHEN OTHERS.
  ENDCASE.


  IF S_PERD-LOW IS NOT INITIAL.
    IF S_PERD-HIGH IS INITIAL.
      S_PERD-HIGH = S_PERD-LOW.
*      message 'Period From and To is mandatory' type 'S' display like 'E'.
*      leave list-processing.
    ENDIF.

    IF  SES_STR_DATE > S_PERD-LOW OR SES_END_DATE < S_PERD-HIGH.
      MESSAGE 'Period is not in the entered month' TYPE 'S' DISPLAY LIKE 'E'.
      LEAVE LIST-PROCESSING.
    ENDIF.

    SES_STR_DATE = S_PERD-LOW.
    SES_END_DATE = S_PERD-HIGH.
  ENDIF.



  IF SY-UNAME EQ 'B.HODHOD'.
    BREAK-POINT.
  ENDIF.

  "Check User Authorization
  AUTHORITY-CHECK OBJECT 'ZM_SLOC'
  ID 'ZPROJECT' FIELD P_LGORT.

*   Display Error Message if User Has No Authority
  IF SY-SUBRC <> 0.
    "Set Error Message
    CONCATENATE 'You are not authorized to print SLOC:' P_LGORT
      INTO $MSG SEPARATED BY SPACE.
    MESSAGE $MSG TYPE 'S' DISPLAY LIKE 'E'.
    LEAVE LIST-PROCESSING.
  ENDIF.

  IF S_EBELN[] IS NOT INITIAL.
    PERFORM SELECTION1.
  ELSE.
    PERFORM SELECTION2.
  ENDIF.






FORM SELECTION1.

  SELECT *
    FROM EKKO
    INTO TABLE LT_EKKO
    WHERE EBELN IN S_EBELN
      AND LIFNR IN S_LIFNR
      AND BSART IN ( 'ZSCN','ZSER','ZSSO' )
      AND LOEKZ EQ ''.

  IF LT_EKKO IS NOT INITIAL.
* Get SES's on the PO item
    SELECT *
      FROM ESSR
      INTO TABLE LT_ESSR
      FOR ALL ENTRIES IN LT_EKKO
      WHERE EBELN   EQ LT_EKKO-EBELN
        AND ZLGORT  EQ P_LGORT
        AND LOEKZ   EQ ''
        AND BUDAT BETWEEN SES_STR_DATE AND SES_END_DATE.
  ENDIF.

  IF LT_ESSR[] IS NOT INITIAL.
    PERFORM SELECTION3.
  ELSE.
    MESSAGE 'No Data Available' TYPE 'S' DISPLAY LIKE 'E'.
    LEAVE LIST-PROCESSING.
  ENDIF.

ENDFORM.



FORM SELECTION2.

* Get SES's in selected period
  SELECT
    ESSR~LBLNI
    ESSR~LBLNE
    ESSR~ERNAM
    ESSR~ERDAT
    ESSR~AEDAT
    ESSR~LWERT
    ESSR~WAERS
    ESSR~PACKNO
    ESSR~TXZ01
    ESSR~EBELN
    ESSR~EBELP
    ESSR~LOEKZ
    ESSR~KZABN
    ESSR~FINAL
    ESSR~FRGGR
    ESSR~FRGSX
    ESSR~FRGKL
    ESSR~FRGZU
    ESSR~FRGRL
    ESSR~NETWR
    ESSR~ZLGORT
    FROM ESSR
    INNER JOIN EKKO ON EKKO~EBELN EQ ESSR~EBELN
    INTO CORRESPONDING FIELDS OF TABLE LT_ESSR
    WHERE ESSR~ZLGORT EQ P_LGORT
      AND ESSR~LOEKZ  EQ ''
      AND EKKO~LIFNR  IN S_LIFNR
      AND EKKO~LOEKZ  EQ ''
      AND ESSR~BUDAT BETWEEN SES_STR_DATE AND SES_END_DATE.

  IF LT_ESSR[] IS NOT INITIAL.
    DELETE ADJACENT DUPLICATES FROM LT_ESSR COMPARING ALL FIELDS.
    SELECT *
      FROM EKKO
      INTO TABLE LT_EKKO
      FOR ALL ENTRIES IN LT_ESSR
      WHERE EBELN EQ LT_ESSR-EBELN
        AND LIFNR IN S_LIFNR
        AND BSART EQ 'ZSRV'
        AND LOEKZ EQ ''.
  ENDIF.

  IF LT_ESSR[] IS NOT INITIAL.
    PERFORM SELECTION3.
  ELSE.
    MESSAGE 'No Data Available' TYPE 'S' DISPLAY LIKE 'E'.
    LEAVE LIST-PROCESSING.
  ENDIF.

ENDFORM.



FORM SELECTION3.

* Filter EKKO with PO only in ESSR
  LOOP AT LT_EKKO INTO LS_EKKO.

    READ TABLE LT_ESSR INTO LS_ESSR
      WITH KEY EBELN = LS_EKKO-EBELN.

    IF SY-SUBRC NE 0.
      LS_EKKO-LOEKZ = 'X'.
    ELSE.
      LS_EKKO-LOEKZ = ''.
    ENDIF.
    MODIFY LT_EKKO FROM LS_EKKO.
    CLEAR: LS_EKKO,LS_ESSR.
  ENDLOOP.
  DELETE LT_EKKO WHERE LOEKZ EQ 'X'.

* Filter SES by approved SES only
  LOOP AT LT_ESSR INTO LS_ESSR.
    IF LS_ESSR-FRGRL EQ 'X' AND LS_ESSR-KZABN NE 'X'.
      ADD 1 TO COUNTER.
      IF COUNTER EQ 1.
        SES_NOT_APPROVED = LS_ESSR-LBLNI.
      ELSE.
        CONCATENATE SES_NOT_APPROVED ',' LS_ESSR-LBLNI INTO SES_NOT_APPROVED.
      ENDIF.
    ENDIF.
    CLEAR: LS_ESSR.
  ENDLOOP.


  IF SES_NOT_APPROVED IS NOT INITIAL.
    CONCATENATE 'Service Entry Sheets #: ' SES_NOT_APPROVED 'are not approved.'
    INTO SES_NOT_APPROVED SEPARATED BY SPACE.
    MESSAGE SES_NOT_APPROVED TYPE 'I'. " display like 'I'.
*   leave list-processing.
*   delete SES not approved
    DELETE LT_ESSR WHERE FRGRL EQ 'X' AND KZABN NE 'X'.
  ENDIF.

  PERFORM SELECTION4.

ENDFORM.



FORM SELECTION4.

* Get PO items
  IF LT_EKKO[] IS NOT INITIAL.
    SELECT *
      FROM EKPO
      INTO TABLE LT_EKPO
      FOR ALL ENTRIES IN LT_EKKO
      WHERE EBELN EQ LT_EKKO-EBELN
        AND LOEKZ EQ ''.
  ENDIF.

  IF LT_EKPO[] IS NOT INITIAL.

    " Check ZTable for SES created before system used.
    " for same PO-Item, same service
    SELECT *
      FROM ZMM_SRV_UPLD
      INTO TABLE LT_ZMM_SRV_UPLD
      FOR ALL ENTRIES IN LT_EKPO
      WHERE EBELN  EQ LT_EKPO-EBELN
        AND EBELP  EQ LT_EKPO-EBELP.

* Get service unit price from PO, use it to calculate previous SES's exist in ZTable
    SELECT *
      FROM ESLH
      INTO CORRESPONDING FIELDS OF TABLE LT_ESLH
      FOR ALL ENTRIES IN LT_EKPO
      WHERE EBELN   EQ LT_EKPO-EBELN
        AND EBELP   EQ LT_EKPO-EBELP
        AND FPACKNO NE ''
        AND DEL EQ ''.

* Get vendor name
    SELECT
      LIFNR
      NAME1
      FROM LFA1
      INTO CORRESPONDING FIELDS OF TABLE LT_LFA1
      FOR ALL ENTRIES IN LT_EKKO
      WHERE LIFNR EQ LT_EKKO-LIFNR.
  ENDIF.

  IF LT_EKKO[] IS NOT INITIAL.
    PERFORM SELECTION5.
  ELSE.
    MESSAGE 'No Data Available' TYPE 'S' DISPLAY LIKE 'E'.
    LEAVE LIST-PROCESSING.
  ENDIF.

ENDFORM.



FORM SELECTION5.

* Get credit memo for the selected PO
  MOVE-CORRESPONDING LT_EKKO[] TO LT_EKKO2[].

  SELECT *
    FROM BKPF
    INTO TABLE LT_BKPF
    FOR ALL ENTRIES IN LT_EKKO2
    WHERE XBLNR EQ LT_EKKO2-EBELN
      AND BUKRS EQ LT_EKKO2-BUKRS
      AND BUDAT BETWEEN SES_STR_DATE AND SES_END_DATE
      AND BLART EQ 'KG'.

  IF LT_BKPF[] IS NOT INITIAL .
    SELECT
      BELNR
      SHKZG
      WRBTR
      SGTXT
      KOART
      NPLNR
      AUFPL
      APLZL
    FROM BSEG
    INTO CORRESPONDING FIELDS OF TABLE LT_BSEG
    FOR ALL ENTRIES IN LT_BKPF
    WHERE BUKRS EQ LT_BKPF-BUKRS
      AND GJAHR EQ LT_BKPF-GJAHR
      AND BELNR EQ LT_BKPF-BELNR
      AND KOART EQ 'S'
      AND NPLNR NE ''.
  ENDIF.

  IF LT_BSEG[] IS NOT INITIAL.
    SELECT
      NPLNR
      AUFPL
      APLZL
      FROM EKKN
      INTO CORRESPONDING FIELDS OF TABLE LT_EKKN
      FOR ALL ENTRIES IN LT_BSEG
      WHERE NPLNR EQ LT_BSEG-NPLNR.
  ENDIF.

  IF LT_EKKN[] IS NOT INITIAL.
    " Activity desc
    SELECT
      AUFPL
      APLZL
      LTXA1
      FROM AFVC
      INTO CORRESPONDING FIELDS OF TABLE LT_AFVC
      FOR ALL ENTRIES IN LT_EKKN
      WHERE AUFPL EQ LT_EKKN-AUFPL
        AND APLZL EQ LT_EKKN-APLZL.

    " Network desc
    SELECT
      AUFNR
      KTEXT
      FROM AUFK
      INTO CORRESPONDING FIELDS OF TABLE LT_AUFK
      FOR ALL ENTRIES IN LT_EKKN
      WHERE AUFNR EQ LT_EKKN-NPLNR.
  ENDIF.

  LOOP AT LT_BSEG INTO LS_BSEG.

    IF DOC_NUM = LS_BSEG-BELNR.
      ADD 1 TO ITEM_NO.
      GS_CRDT_MEM-ITEM_NO = ITEM_NO.
    ELSE.
      ITEM_NO = 1.
      GS_CRDT_MEM-ITEM_NO = ITEM_NO.
    ENDIF.

    SHIFT GS_CRDT_MEM-ITEM_NO LEFT DELETING LEADING '0'.
    SHIFT GS_CRDT_MEM-ITEM_NO LEFT DELETING LEADING SPACE.

    GS_CRDT_MEM-NPLNR = LS_BSEG-NPLNR.
    GS_CRDT_MEM-APLZL = LS_BSEG-APLZL.
    GS_CRDT_MEM-SGTXT = LS_BSEG-SGTXT.
    GS_CRDT_MEM-WRBTR = LS_BSEG-WRBTR.

    READ TABLE LT_BKPF INTO LS_BKPF
      WITH KEY BELNR = LS_BSEG-BELNR.
    GS_CRDT_MEM-BELNR = LS_BKPF-BELNR.
    GS_CRDT_MEM-BUDAT = LS_BKPF-BUDAT.
    GS_CRDT_MEM-WAERS = LS_BKPF-WAERS.

    READ TABLE LT_EKKO2 INTO LS_EKKO2
      WITH KEY EBELN = LS_BKPF-XBLNR.
    GS_CRDT_MEM-EBELN = LS_EKKO2-EBELN.

    READ TABLE LT_AUFK INTO LS_AUFK
      WITH KEY AUFNR = LS_BSEG-NPLNR.
    READ TABLE LT_EKKN INTO LS_EKKN
      WITH KEY NPLNR = LS_BSEG-NPLNR
               APLZL = LS_BSEG-APLZL.
    READ TABLE LT_AFVC INTO LS_AFVC
      WITH KEY AUFPL = LS_EKKN-AUFPL
               APLZL = LS_EKKN-APLZL.
    CONCATENATE LS_AUFK-KTEXT '/' LS_AFVC-LTXA1
      INTO GS_CRDT_MEM-NET_ACT_DESC SEPARATED BY SPACE.
    SHIFT GS_CRDT_MEM-NET_ACT_DESC LEFT DELETING LEADING SPACE.

    SHIFT GS_CRDT_MEM-NPLNR LEFT DELETING LEADING '0'.
    SHIFT GS_CRDT_MEM-APLZL LEFT DELETING LEADING '0'.
    CONCATENATE GS_CRDT_MEM-NPLNR '/' GS_CRDT_MEM-APLZL
                INTO GS_CRDT_MEM-NETWORK_ACTIVITY
                SEPARATED BY SPACE.
    SHIFT GS_CRDT_MEM-NETWORK_ACTIVITY LEFT DELETING LEADING SPACE.

    DOC_NUM = LS_BSEG-BELNR.

    APPEND GS_CRDT_MEM TO GT_CRDT_MEM.
    CLEAR: LS_BKPF,LS_BSEG,LS_EKKN,LS_AFVC,LS_AUFK.
  ENDLOOP.

  PERFORM SELECTION6.
ENDFORM.



FORM SELECTION6.

  IF LT_ESSR[] IS NOT INITIAL.
* Get temp packages for SES'S selected
    SELECT
      PACKNO
      SUB_PACKNO
      FROM ESLL
      INTO CORRESPONDING FIELDS OF TABLE LT_ESLL_TEMP
      FOR ALL ENTRIES IN LT_ESSR
      WHERE PACKNO EQ LT_ESSR-PACKNO
        AND DEL EQ ''.
  ENDIF.

* Get SES line items (Services)
  IF LT_ESLL_TEMP[] IS NOT INITIAL.
    SELECT
      *
      FROM ESLL
      INTO TABLE LT_ESLL
      FOR ALL ENTRIES IN LT_ESLL_TEMP
      WHERE PACKNO EQ LT_ESLL_TEMP-SUB_PACKNO
        AND DEL EQ ''.
  ENDIF.


  LOOP AT LT_EKKO INTO LS_EKKO.

    LOOP AT LT_ESSR INTO LS_ESSR WHERE EBELN EQ LS_EKKO-EBELN.

      " Get Services on SES
      READ TABLE LT_ESLL_TEMP INTO LS_ESLL_TEMP
        WITH KEY PACKNO = LS_ESSR-PACKNO.

      LOOP AT LT_ESLL INTO LS_ESLL WHERE PACKNO = LS_ESLL_TEMP-SUB_PACKNO.

        IF LS_ESLL-USERF1_TXT EQ 'initial'.
          LS_ALL_DATA_CURR-COLOR_IND1 = 'X'.
        ENDIF.

        LS_ALL_DATA_CURR-EBELN       = LS_ESSR-EBELN.
        LS_ALL_DATA_CURR-EBELP       = LS_ESSR-EBELP.
        LS_ALL_DATA_CURR-PACKNO      = LS_ESSR-PACKNO.
        LS_ALL_DATA_CURR-LBLNI       = LS_ESSR-LBLNI.
        LS_ALL_DATA_CURR-BUDAT       = LS_ESSR-BUDAT.
        LS_ALL_DATA_CURR-TXZ01       = LS_ESSR-TXZ01.
        LS_ALL_DATA_CURR-LWERT       = LS_ESSR-LWERT.
        LS_ALL_DATA_CURR-WAERS       = LS_ESSR-WAERS.

        LS_ALL_DATA_CURR-SUB_PACKNO  = LS_ESLL_TEMP-SUB_PACKNO.
        LS_ALL_DATA_CURR-INTROW      = LS_ESLL-INTROW    .
        LS_ALL_DATA_CURR-EXTROW      = LS_ESLL-EXTROW    .
        LS_ALL_DATA_CURR-SRVPOS      = LS_ESLL-SRVPOS    .
        LS_ALL_DATA_CURR-MENGE       = LS_ESLL-MENGE     .
        LS_ALL_DATA_CURR-MEINS       = LS_ESLL-MEINS     .
        LS_ALL_DATA_CURR-BRTWR       = LS_ESLL-BRTWR     .
        LS_ALL_DATA_CURR-NETWR       = LS_ESLL-NETWR     .
        LS_ALL_DATA_CURR-KTEXT1      = LS_ESLL-KTEXT1    .
        LS_ALL_DATA_CURR-MATKL       = LS_ESLL-MATKL     .
        LS_ALL_DATA_CURR-TBTWR       = LS_ESLL-TBTWR     .
        LS_ALL_DATA_CURR-EXTSRVNO    = LS_ESLL-EXTSRVNO  .
        LS_ALL_DATA_CURR-FORMELNR    = LS_ESLL-FORMELNR  .
        LS_ALL_DATA_CURR-FRMVAL1     = LS_ESLL-FRMVAL1   .
        LS_ALL_DATA_CURR-FRMVAL2     = LS_ESLL-FRMVAL2   .
        LS_ALL_DATA_CURR-USERF2_TXT  = LS_ESLL-USERF2_TXT.

        LS_ALL_DATA_CURR-TOT_Q   = LS_ESLL-USERF1_NUM. SHIFT LS_ALL_DATA_CURR-TOT_Q LEFT DELETING LEADING '0'.
        LS_ALL_DATA_CURR-TOT_PT  = LS_ESLL-USERF2_NUM.
        LS_ALL_DATA_CURR-Q_CURR  = LS_ESLL-USERF1_NUM. SHIFT LS_ALL_DATA_CURR-Q_CURR LEFT DELETING LEADING '0'.

        APPEND LS_ALL_DATA_CURR TO LT_ALL_DATA_CURR.
        CLEAR: LS_ALL_DATA_CURR,LS_ESLL.
      ENDLOOP.

      CLEAR: LS_ESLL_TEMP.
    ENDLOOP.

    CLEAR: LS_EKKO.
  ENDLOOP.


* Move unplanned services to seprate table
  LOOP AT LT_ALL_DATA_CURR INTO LS_ALL_DATA_CURR WHERE SRVPOS IS INITIAL.
    MOVE-CORRESPONDING LS_ALL_DATA_CURR TO LS_UNPLANNED_SRV.
    LS_UNPLANNED_SRV-MATKL = 'ZUNP'.

    READ TABLE LT_EKPO INTO LS_EKPO
       WITH KEY EBELN = LS_ALL_DATA_CURR-EBELN
                EBELP = LS_ALL_DATA_CURR-EBELP.

    LS_UNPLANNED_SRV-ITEM_DESC = LS_EKPO-TXZ01.

    APPEND LS_UNPLANNED_SRV TO LT_UNPLANNED_SRV.
    CLEAR: LS_ALL_DATA_CURR,LS_UNPLANNED_SRV,LS_EKPO.
  ENDLOOP.

  DELETE LT_ALL_DATA_CURR WHERE SRVPOS IS INITIAL.

  " Service exists on more than one SES (in current month)
  " Keep service on last SES (on same PO and item)
  " Each service has its last recent SES
  SORT LT_ALL_DATA_CURR DESCENDING BY EBELN EBELP SRVPOS LBLNI EXTROW.
  LT_ALL_DATA2[] = LT_ALL_DATA_CURR[].
  DELETE ADJACENT DUPLICATES FROM LT_ALL_DATA_CURR COMPARING EBELN EBELP SRVPOS.

  " Get tot_pr for each service: sum values in current month (All SES in current month)
  LOOP AT LT_ALL_DATA_CURR INTO LS_ALL_DATA_CURR.
    LOOP AT LT_ALL_DATA2 INTO LS_ALL_DATA2
      WHERE EBELN   EQ LS_ALL_DATA_CURR-EBELN
        AND EBELP   EQ LS_ALL_DATA_CURR-EBELP
        AND SRVPOS  EQ LS_ALL_DATA_CURR-SRVPOS.

      LS_ALL_DATA_CURR-TOTAL_VALUE  = LS_ALL_DATA_CURR-TOTAL_VALUE + LS_ALL_DATA2-NETWR.
      CLEAR: LS_ALL_DATA2.
    ENDLOOP.

    MODIFY LT_ALL_DATA_CURR FROM LS_ALL_DATA_CURR.
    CLEAR: LS_ALL_DATA_CURR,TAB_INDEX.
  ENDLOOP.


  " Get previous SES before current month
  SELECT *
    FROM ESSR
    INTO TABLE LT_ESSR_PREV
    FOR ALL ENTRIES IN LT_ALL_DATA_CURR
    WHERE EBELN EQ LT_ALL_DATA_CURR-EBELN
      AND EBELP EQ LT_ALL_DATA_CURR-EBELP
      AND BUDAT LT SES_STR_DATE
      AND LOEKZ EQ ''.

  IF SY-SUBRC EQ 0.
    SELECT
      PACKNO
      SUB_PACKNO
      FROM ESLL
      INTO CORRESPONDING FIELDS OF TABLE LT_ESLL_PREV_TEMP
      FOR ALL ENTRIES IN LT_ESSR_PREV
      WHERE PACKNO EQ LT_ESSR_PREV-PACKNO
        AND DEL EQ ''.

    SELECT *
      FROM ESLL
      INTO TABLE LT_ESLL_PREV
      FOR ALL ENTRIES IN LT_ESLL_PREV_TEMP
      WHERE PACKNO EQ LT_ESLL_PREV_TEMP-SUB_PACKNO
        AND DEL EQ ''.
  ENDIF.

  LOOP AT LT_ESSR_PREV INTO LS_ESSR_PREV.

    " Get Services on SES
    READ TABLE LT_ESLL_PREV_TEMP INTO LS_ESLL_PREV_TEMP
      WITH KEY PACKNO = LS_ESSR_PREV-PACKNO.

    LOOP AT LT_ESLL_PREV INTO LS_ESLL_PREV WHERE PACKNO = LS_ESLL_PREV_TEMP-SUB_PACKNO.

      LS_ALL_DATA_PREV-EBELN       = LS_ESSR_PREV-EBELN.
      LS_ALL_DATA_PREV-EBELP       = LS_ESSR_PREV-EBELP.
      LS_ALL_DATA_PREV-PACKNO      = LS_ESSR_PREV-PACKNO.
      LS_ALL_DATA_PREV-LBLNI       = LS_ESSR_PREV-LBLNI.
      LS_ALL_DATA_PREV-BUDAT       = LS_ESSR_PREV-BUDAT.
      LS_ALL_DATA_PREV-TXZ01       = LS_ESSR_PREV-TXZ01.
      LS_ALL_DATA_PREV-LWERT       = LS_ESSR_PREV-LWERT.
      LS_ALL_DATA_PREV-WAERS       = LS_ESSR_PREV-WAERS.

      LS_ALL_DATA_PREV-SUB_PACKNO  = LS_ESLL_PREV_TEMP-SUB_PACKNO.
      LS_ALL_DATA_PREV-INTROW      = LS_ESLL_PREV-INTROW    .
      LS_ALL_DATA_PREV-EXTROW      = LS_ESLL_PREV-EXTROW    .
      LS_ALL_DATA_PREV-SRVPOS      = LS_ESLL_PREV-SRVPOS    .
      LS_ALL_DATA_PREV-MENGE       = LS_ESLL_PREV-MENGE     .
      LS_ALL_DATA_PREV-MEINS       = LS_ESLL_PREV-MEINS     .
      LS_ALL_DATA_PREV-BRTWR       = LS_ESLL_PREV-BRTWR     .
      LS_ALL_DATA_PREV-NETWR       = LS_ESLL_PREV-NETWR     .
      LS_ALL_DATA_PREV-KTEXT1      = LS_ESLL_PREV-KTEXT1    .
      LS_ALL_DATA_PREV-MATKL       = LS_ESLL_PREV-MATKL     .
      LS_ALL_DATA_PREV-TBTWR       = LS_ESLL_PREV-TBTWR     .
      LS_ALL_DATA_PREV-EXTSRVNO    = LS_ESLL_PREV-EXTSRVNO  .
      LS_ALL_DATA_PREV-FORMELNR    = LS_ESLL_PREV-FORMELNR  .
      LS_ALL_DATA_PREV-FRMVAL1     = LS_ESLL_PREV-FRMVAL1   .
      LS_ALL_DATA_PREV-FRMVAL2     = LS_ESLL_PREV-FRMVAL2   .
      LS_ALL_DATA_PREV-USERF2_TXT  = LS_ESLL_PREV-USERF2_TXT.

      LS_ALL_DATA_PREV-PREV_Q   = LS_ESLL_PREV-USERF1_NUM. SHIFT LS_ALL_DATA_PREV-PREV_Q LEFT DELETING LEADING '0'.
      LS_ALL_DATA_PREV-PREV_PT  = LS_ESLL_PREV-USERF2_NUM.
      LS_ALL_DATA_PREV-Q_PREV   = LS_ESLL_PREV-USERF1_NUM. SHIFT LS_ALL_DATA_PREV-Q_PREV LEFT DELETING LEADING '0'.

      APPEND LS_ALL_DATA_PREV TO LT_ALL_DATA_PREV.
      CLEAR: LS_ALL_DATA_PREV,LS_ESLL_PREV.
    ENDLOOP.

    CLEAR: LS_ESLL_TEMP.
  ENDLOOP.


  " Service exists on more than one SES (Before current month)
  " Keep service on last SES (on same PO and item)
  " Each service has its last recent SES
  SORT LT_ALL_DATA_PREV DESCENDING BY EBELN EBELP SRVPOS LBLNI EXTROW.
  LT_ALL_DATA3[] = LT_ALL_DATA_PREV[].
  DELETE ADJACENT DUPLICATES FROM LT_ALL_DATA_PREV COMPARING EBELN EBELP SRVPOS.

  " Get tot_pr for each service: sum values before current month (All SES before current month)
  LOOP AT LT_ALL_DATA_PREV INTO LS_ALL_DATA_PREV.
    LOOP AT LT_ALL_DATA3 INTO LS_ALL_DATA3
      WHERE EBELN   EQ LS_ALL_DATA_PREV-EBELN
        AND EBELP   EQ LS_ALL_DATA_PREV-EBELP
        AND SRVPOS  EQ LS_ALL_DATA_PREV-SRVPOS.

      LS_ALL_DATA_PREV-PREV_PR  = LS_ALL_DATA_PREV-PREV_PR + LS_ALL_DATA3-NETWR.
      CLEAR: LS_ALL_DATA3.
    ENDLOOP.

    MODIFY LT_ALL_DATA_PREV FROM LS_ALL_DATA_PREV.
    CLEAR: LS_ALL_DATA_PREV,TAB_INDEX.
  ENDLOOP.






  LOOP AT LT_ALL_DATA_CURR INTO LS_ALL_DATA_CURR.
* Check if unit price for each service changed in diff SES,
* Then it will appear in diff color
    IF LS_ALL_DATA_CURR-COLOR_IND2 IS INITIAL.
      LOOP AT LT_ALL_DATA2 INTO LS_ALL_DATA2
        WHERE EBELN  = LS_ALL_DATA_CURR-EBELN
          AND EBELP  = LS_ALL_DATA_CURR-EBELP
          AND SRVPOS = LS_ALL_DATA_CURR-SRVPOS.

        IF LS_ALL_DATA-COLOR_IND2 IS INITIAL.
          IF LS_ALL_DATA2-TBTWR NE LS_ALL_DATA_CURR-TBTWR.
            LS_ALL_DATA-COLOR_IND2 = 'X'.
            EXIT.
          ENDIF.
        ENDIF.

        " If field EXTSRVNO in table ESLL is not initial
        " Then that means service price has been changed before.
        " This case happen because of PO's uploaded to system but related SES not created by system.
        IF LS_ALL_DATA-COLOR_IND2 IS INITIAL.
          IF LS_ALL_DATA2-EXTSRVNO IS NOT INITIAL.
            LS_ALL_DATA-COLOR_IND2 = 'X'.
            EXIT.
          ENDIF.
        ENDIF.

        CLEAR: LS_ALL_DATA2.
      ENDLOOP.
    ENDIF.

    IF LS_ALL_DATA_CURR-COLOR_IND2 IS INITIAL.
      LOOP AT LT_ALL_DATA3 INTO LS_ALL_DATA3
        WHERE EBELN  = LS_ALL_DATA_CURR-EBELN
          AND EBELP  = LS_ALL_DATA_CURR-EBELP
          AND SRVPOS = LS_ALL_DATA_CURR-SRVPOS.

        IF LS_ALL_DATA3-TBTWR NE LS_ALL_DATA_CURR-TBTWR.
          LS_ALL_DATA-COLOR_IND2 = 'X'.
          EXIT.
        ENDIF.
        CLEAR: LS_ALL_DATA3.
      ENDLOOP.
    ENDIF.

*      loop at lt_eslh into ls_eslh
*        where ebeln eq ls_all_data_curr-ebeln
*          and ebelp eq ls_all_data_curr-ebelp.
*        select single
*          extsrvno
*          from esll
*          into lv_extsrvno
*          where packno   eq ls_eslh-packno
*            and srvpos   eq ls_all_data_curr-srvpos
*            and package  ne 'X'
*            and extsrvno ne ''.
*        if lv_extsrvno is not initial.
*          ls_all_data-color_ind2 = 'X'.
*          exit.
*        endif.
*        clear: ls_eslh.
*      endloop.



    READ TABLE LT_EKPO INTO LS_EKPO
      WITH KEY EBELN = LS_ALL_DATA_CURR-EBELN
               EBELP = LS_ALL_DATA_CURR-EBELP.
    LS_ALL_DATA-ITEM_DESC = LS_EKPO-TXZ01.

    LS_ALL_DATA-EBELN       = LS_ALL_DATA_CURR-EBELN.
    LS_ALL_DATA-EBELP       = LS_ALL_DATA_CURR-EBELP.
    LS_ALL_DATA-PACKNO      = LS_ALL_DATA_CURR-PACKNO.
    LS_ALL_DATA-LBLNI       = LS_ALL_DATA_CURR-LBLNI.
    LS_ALL_DATA-BUDAT       = LS_ALL_DATA_CURR-BUDAT.
    LS_ALL_DATA-TXZ01       = LS_ALL_DATA_CURR-TXZ01.
    LS_ALL_DATA-LWERT       = LS_ALL_DATA_CURR-LWERT.
    LS_ALL_DATA-WAERS       = LS_ALL_DATA_CURR-WAERS.

    LS_ALL_DATA-SUB_PACKNO  = LS_ALL_DATA_CURR-SUB_PACKNO.
    LS_ALL_DATA-INTROW      = LS_ALL_DATA_CURR-INTROW    .
    LS_ALL_DATA-EXTROW      = LS_ALL_DATA_CURR-EXTROW    .
    LS_ALL_DATA-SRVPOS      = LS_ALL_DATA_CURR-SRVPOS    .
    LS_ALL_DATA-MENGE       = LS_ALL_DATA_CURR-MENGE     .
    LS_ALL_DATA-MEINS       = LS_ALL_DATA_CURR-MEINS     .
    LS_ALL_DATA-BRTWR       = LS_ALL_DATA_CURR-BRTWR     .
    LS_ALL_DATA-NETWR       = LS_ALL_DATA_CURR-NETWR     .
    LS_ALL_DATA-KTEXT1      = LS_ALL_DATA_CURR-KTEXT1    .
    LS_ALL_DATA-MATKL       = LS_ALL_DATA_CURR-MATKL     .
    LS_ALL_DATA-TBTWR       = LS_ALL_DATA_CURR-TBTWR     .
    LS_ALL_DATA-FORMELNR    = LS_ALL_DATA_CURR-FORMELNR  .
    LS_ALL_DATA-FRMVAL1     = LS_ALL_DATA_CURR-FRMVAL1   .
    LS_ALL_DATA-FRMVAL2     = LS_ALL_DATA_CURR-FRMVAL2   .
    LS_ALL_DATA-USERF2_TXT  = LS_ALL_DATA_CURR-USERF2_TXT.
    LS_ALL_DATA-COLOR_IND1  = LS_ALL_DATA_CURR-COLOR_IND1.

    LS_ALL_DATA-TOT_Q       = LS_ALL_DATA_CURR-TOT_Q.
    LS_ALL_DATA-TOT_PT      = LS_ALL_DATA_CURR-TOT_PT.
    LS_ALL_DATA-Q_CURR      = LS_ALL_DATA_CURR-Q_CURR.
    LS_ALL_DATA-TOTAL_VALUE = LS_ALL_DATA_CURR-TOTAL_VALUE.

    READ TABLE LT_ALL_DATA_PREV INTO LS_ALL_DATA_PREV
      WITH KEY EBELN  = LS_ALL_DATA_CURR-EBELN
               EBELP  = LS_ALL_DATA_CURR-EBELP
               SRVPOS = LS_ALL_DATA_CURR-SRVPOS.
    IF SY-SUBRC EQ 0.

      " Add previous SES's service amount exist before create system.
      READ TABLE LT_ZMM_SRV_UPLD INTO LS_ZMM_SRV_UPLD
        WITH KEY EBELN  = LS_ALL_DATA_CURR-EBELN
                 EBELP  = LS_ALL_DATA_CURR-EBELP
                 SRVPOS = LS_ALL_DATA_CURR-SRVPOS.
      IF SY-SUBRC EQ 0.
        " Get service unit price from PO (Not from SES), use it to calculate previous SES's exist in ZTable
        LOOP AT LT_ESLH INTO LS_ESLH
          WHERE EBELN EQ LS_ALL_DATA_CURR-EBELN
            AND EBELP EQ LS_ALL_DATA_CURR-EBELP.
          SELECT SINGLE
            TBTWR
            FROM ESLL
            INTO PO_UNIT_PRICE
            WHERE PACKNO  EQ LS_ESLH-PACKNO
              AND SRVPOS  EQ LS_ALL_DATA_CURR-SRVPOS
              AND PACKAGE NE 'X'.
          IF PO_UNIT_PRICE IS NOT INITIAL .
            EXIT.
          ENDIF.
          CLEAR: LS_ESLH.
        ENDLOOP.

        LS_ALL_DATA-PREV_PR =
          LS_ALL_DATA_PREV-PREV_PR + ( PO_UNIT_PRICE * LS_ZMM_SRV_UPLD-USERF1_NUM * ( LS_ZMM_SRV_UPLD-USERF2_NUM / 100 ) ).
      ELSE.
        LS_ALL_DATA-PREV_PR     = LS_ALL_DATA_PREV-PREV_PR.
      ENDIF.

      LS_ALL_DATA-PREV_Q      = LS_ALL_DATA_PREV-PREV_Q .  SHIFT LS_ALL_DATA-PREV_Q LEFT DELETING LEADING '0'.
      LS_ALL_DATA-PREV_PT     = LS_ALL_DATA_PREV-PREV_PT.
      LS_ALL_DATA-Q_PREV      = LS_ALL_DATA_PREV-Q_PREV .  SHIFT LS_ALL_DATA-Q_PREV LEFT DELETING LEADING '0'.
      LS_ALL_DATA-Q_UPDT      = LS_ALL_DATA-Q_CURR - LS_ALL_DATA-Q_PREV.
    ELSE.

      " Check ZTable for SES created before system created, for same PO-Item, same service
      " Get previous quantity and percentage
      READ TABLE LT_ZMM_SRV_UPLD INTO LS_ZMM_SRV_UPLD
        WITH KEY EBELN  = LS_ALL_DATA_CURR-EBELN
                 EBELP  = LS_ALL_DATA_CURR-EBELP
                 SRVPOS = LS_ALL_DATA_CURR-SRVPOS.

      IF SY-SUBRC EQ 0.
        " Get service unit price from PO (Not from SES), use it to calculate previous SES's exist in ZTable
        LOOP AT LT_ESLH INTO LS_ESLH
          WHERE EBELN EQ LS_ALL_DATA_CURR-EBELN
            AND EBELP EQ LS_ALL_DATA_CURR-EBELP.
          SELECT SINGLE
            TBTWR
            FROM ESLL
            INTO PO_UNIT_PRICE
            WHERE PACKNO  EQ LS_ESLH-PACKNO
              AND SRVPOS  EQ LS_ALL_DATA_CURR-SRVPOS
              AND PACKAGE NE 'X'.
          IF PO_UNIT_PRICE IS NOT INITIAL .
            EXIT.
          ENDIF.
          CLEAR: LS_ESLH.
        ENDLOOP.

        LS_ALL_DATA-PREV_Q      = LS_ZMM_SRV_UPLD-USERF1_NUM. SHIFT LS_ALL_DATA-PREV_Q LEFT DELETING LEADING '0'.
        LS_ALL_DATA-PREV_PT     = LS_ZMM_SRV_UPLD-USERF2_NUM.
        LS_ALL_DATA-Q_PREV      = LS_ZMM_SRV_UPLD-USERF1_NUM. SHIFT LS_ALL_DATA-Q_PREV LEFT DELETING LEADING '0'.
        LS_ALL_DATA-PREV_PR     = LS_ALL_DATA-PREV_Q * PO_UNIT_PRICE * ( LS_ALL_DATA-PREV_PT / 100 ).
        LS_ALL_DATA-Q_UPDT      = LS_ALL_DATA-Q_CURR - LS_ALL_DATA-Q_PREV.
      ENDIF.
    ENDIF.

    LS_ALL_DATA-TOT_PR = LS_ALL_DATA-PREV_PR + LS_ALL_DATA-TOTAL_VALUE.
    APPEND LS_ALL_DATA TO LT_ALL_DATA.
    CLEAR: LS_ALL_DATA,LS_ALL_DATA_PREV,LS_ALL_DATA_CURR,PO_UNIT_PRICE,LS_EKPO.
  ENDLOOP.




  " Fill table service groups attached on PO
  MOVE-CORRESPONDING LT_ALL_DATA[] TO LT_OUTPUT_SGROUP[].

  LOOP AT LT_UNPLANNED_SRV INTO LS_UNPLANNED_SRV.
    LS_OUTPUT_SGROUP-EBELN = LS_UNPLANNED_SRV-EBELN.
    LS_OUTPUT_SGROUP-MATKL = 'ZUNP'.

    APPEND LS_OUTPUT_SGROUP TO LT_OUTPUT_SGROUP.
    CLEAR: LS_UNPLANNED_SRV.
  ENDLOOP.

* Get Service groups related to PO
  SORT LT_OUTPUT_SGROUP BY EBELN MATKL.
  DELETE ADJACENT DUPLICATES FROM LT_OUTPUT_SGROUP COMPARING EBELN MATKL.
  SORT LT_OUTPUT_SGROUP ASCENDING BY EBELN MATKL.

  IF LT_OUTPUT_SGROUP[] IS NOT INITIAL.
    SELECT
      MATKL
      WGBEZ60
      FROM T023T
      INTO CORRESPONDING FIELDS OF TABLE LT_T023T
      FOR ALL ENTRIES IN LT_OUTPUT_SGROUP
        WHERE MATKL EQ LT_OUTPUT_SGROUP-MATKL.
  ENDIF.

  LOOP AT LT_OUTPUT_SGROUP INTO LS_OUTPUT_SGROUP.
    IF LS_OUTPUT_SGROUP-MATKL EQ 'ZUNP'.
      LS_OUTPUT_SGROUP-WGBEZ60 = 'أعمال غير مخططة'.
    ELSE.
      READ TABLE LT_T023T INTO LS_T023T
        WITH KEY MATKL = LS_OUTPUT_SGROUP-MATKL.
      LS_OUTPUT_SGROUP-WGBEZ60 = LS_T023T-WGBEZ60.
    ENDIF.

    MODIFY LT_OUTPUT_SGROUP FROM LS_OUTPUT_SGROUP.
    CLEAR: LS_OUTPUT_SGROUP,LS_T023T.
  ENDLOOP.


* unplanned services
  LOOP AT LT_UNPLANNED_SRV INTO LS_UNPLANNED_SRV.
    LS_UNPLANNED_SRV-TOT_Q   = LS_UNPLANNED_SRV-MENGE.
    SHIFT LS_UNPLANNED_SRV-TOT_Q LEFT DELETING LEADING '0'.
    SHIFT LS_UNPLANNED_SRV-TOT_Q LEFT DELETING LEADING SPACE.
    LS_UNPLANNED_SRV-TOTAL_VALUE = ( LS_UNPLANNED_SRV-TOT_Q * LS_UNPLANNED_SRV-TBTWR ).
*    ls_unplanned_srv-total_amount = ls_unplanned_srv-total_amount + ls_unplanned_srv-total_value.

    MODIFY LT_UNPLANNED_SRV FROM LS_UNPLANNED_SRV.
    CLEAR: LS_UNPLANNED_SRV.
  ENDLOOP.







  IF LT_UNPLANNED_SRV[] IS NOT INITIAL.
    APPEND LINES OF LT_UNPLANNED_SRV[] TO LT_ALL_DATA[].
  ENDIF.

  SORT LT_ALL_DATA ASCENDING BY EBELN EBELP.
  MOVE-CORRESPONDING LT_ALL_DATA[] TO IT_OUTPUT[].





  LOOP AT LT_EKKO INTO LS_EKKO.
    LS_OUTPUT_PO-CONTRACT_NO = LS_EKKO-EBELN.
    LS_OUTPUT_PO-VENDOR_NO   = LS_EKKO-LIFNR.

    READ TABLE LT_LFA1 INTO LS_LFA1
      WITH KEY LIFNR = LS_EKKO-LIFNR.
    LS_OUTPUT_PO-VENDOR_NAME  = LS_LFA1-NAME1.

    LOOP AT LT_EKPO INTO LS_EKPO WHERE EBELN EQ LS_EKKO-EBELN.
      ADD LS_EKPO-NETWR TO LS_OUTPUT_PO-TOTAL_CONTRACT_VALUE.

      IF LS_OUTPUT_PO-CONTRACT_DESC IS INITIAL.
        LS_OUTPUT_PO-CONTRACT_DESC = LS_EKPO-IDNLF.
      ENDIF.
      CLEAR: LS_EKPO,LS_OUTPUT_SGROUP.
    ENDLOOP.

    LOOP AT LT_ALL_DATA INTO LS_ALL_DATA WHERE EBELN EQ LS_EKKO-EBELN.
      ADD LS_ALL_DATA-TOTAL_VALUE TO LS_OUTPUT_PO-TOTAL_AMOUNT.
      CLEAR: LS_ALL_DATA.
    ENDLOOP.

* Retention & Net amount
    RETENTION     = LS_EKKO-RETPC / 100.
    LS_OUTPUT_PO-RETENTION  = ( LS_OUTPUT_PO-TOTAL_AMOUNT ) * RETENTION.
    LS_OUTPUT_PO-NET_AMOUNT = LS_OUTPUT_PO-TOTAL_AMOUNT - LS_OUTPUT_PO-RETENTION.

* Get Total amount of work accomplished, including this SES
    SELECT PACKNO
    FROM ESSR
    INTO CORRESPONDING FIELDS OF TABLE IT_ESSR_ACCOMP
    WHERE EBELN EQ LS_EKKO-EBELN
      AND BUDAT <= SES_END_DATE
      AND LOEKZ EQ ''
      AND ( FRGRL NE 'X' AND KZABN EQ 'X' ).

    IF IT_ESSR_ACCOMP[] IS NOT INITIAL.
      SELECT SUB_PACKNO
        FROM ESLL
        INTO CORRESPONDING FIELDS OF TABLE IT_ESLL_ACCOMP_TEMP
        FOR ALL ENTRIES IN IT_ESSR_ACCOMP
        WHERE PACKNO EQ IT_ESSR_ACCOMP-PACKNO
          AND DEL EQ ''.
    ENDIF.

    IF IT_ESLL_ACCOMP_TEMP[] IS NOT INITIAL.
      SELECT *
        FROM ESLL
        INTO CORRESPONDING FIELDS OF TABLE IT_ESLL_ACCOMP
        FOR ALL ENTRIES IN IT_ESLL_ACCOMP_TEMP
        WHERE PACKNO EQ IT_ESLL_ACCOMP_TEMP-SUB_PACKNO
          AND DEL EQ ''.
    ENDIF.

    LOOP AT IT_ESLL_ACCOMP INTO WA_ESLL_ACCOMP.
      ADD WA_ESLL_ACCOMP-NETWR TO LS_OUTPUT_PO-TOTAL_ACCOMP.
      CLEAR: WA_ESLL_ACCOMP.
    ENDLOOP.

    LS_OUTPUT_PO-RETENTION_ACCOMP = ( LS_OUTPUT_PO-TOTAL_ACCOMP * RETENTION ).
    LS_OUTPUT_PO-NET_ACCOMP       = ( LS_OUTPUT_PO-TOTAL_ACCOMP - LS_OUTPUT_PO-RETENTION_ACCOMP ).

    APPEND LS_OUTPUT_PO TO LT_OUTPUT_PO.
    CLEAR: LS_EKKO,LS_OUTPUT_PO,LS_OUTPUT_SGROUP.
    REFRESH: IT_ESSR_ACCOMP,IT_ESLL_ACCOMP_TEMP,IT_ESLL_ACCOMP.
  ENDLOOP.


  PERFORM DISPLAY_FORM.

ENDFORM.










FORM DISPLAY_FORM.

  SORT LT_OUTPUT_PO ASCENDING BY CONTRACT_NO.
  SORT LT_OUTPUT_SGROUP ASCENDING BY EBELN MATKL.
  SORT IT_OUTPUT ASCENDING BY EBELN MATKL SRVPOS.

  FP_OUTPUTPARAMS-PREVIEW   = ABAP_TRUE.
  FP_OUTPUTPARAMS-NODIALOG  = ABAP_TRUE.
  fp_outputparams-dest      = 'LP01'.

  CALL FUNCTION 'FP_FUNCTION_MODULE_NAME'
    EXPORTING
      I_NAME     = 'ZMM_SES_MON_FM2'
    IMPORTING
      E_FUNCNAME = FM_NAME.

  CALL FUNCTION 'FP_JOB_OPEN'
    CHANGING
      IE_OUTPUTPARAMS = FP_OUTPUTPARAMS
    EXCEPTIONS
      CANCEL          = 1
      USAGE_ERROR     = 2
      SYSTEM_ERROR    = 3
      INTERNAL_ERROR  = 4
      OTHERS          = 5.

  CALL FUNCTION FM_NAME
    EXPORTING
      /1BCDWB/DOCPARAMS = FP_DOCPARAMS
      IT_SERVICES_LINES = IT_OUTPUT
      IT_PO             = LT_OUTPUT_PO
      IT_SERVICE_GROUPS = LT_OUTPUT_SGROUP
      CRDT_MEM          = GT_CRDT_MEM
      MONTH_NAME        = MONTH_NAME
      START_DATE        = SES_STR_DATE
      END_DATE          = SES_END_DATE
      PROJECT_NAME      = LV_PROJECT_NAME
*     ZZXSTRING         = W_BINARY
*     ZZSTRING          = W_BASE
*    IMPORTING
*     /1BCDWB/FORMOUTPUT   =
    EXCEPTIONS
      USAGE_ERROR       = 1
      SYSTEM_ERROR      = 2
      INTERNAL_ERROR    = 3.

  CALL FUNCTION 'FP_JOB_CLOSE'
*    IMPORTING
*     E_RESULT        =
    EXCEPTIONS
      USAGE_ERROR    = 1
      SYSTEM_ERROR   = 2
      INTERNAL_ERROR = 3
      OTHERS         = 4.
ENDFORM.
