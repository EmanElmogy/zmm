REPORT ZMM_SES_FINAL_REPORT.



***********************************************************************
* Title         : Service Entry Sheet                                 *
*                                                                     *
* Form          : ZMM_SES_FM                                          *
*                                                                     *
* T-code        : ML83                                                *
*                                                                     *
* Package       : ZMM                                                 *
*                                                                     *
* Creation Date : 30/04/2015                                          *
*                                                                     *
* Author        : CIC Egypt - Bahaa hodhod                            *
*                 Bahaa_hodhod@windowslive.com                        *
***********************************************************************


DATA: FM_NAME           TYPE RS38L_FNAM,
      FP_DOCPARAMS      TYPE SFPDOCPARAMS,
      FP_OUTPUTPARAMS   TYPE SFPOUTPUTPARAMS.

DATA: LV_VENDOR_NO            TYPE EKKO-LIFNR.
DATA: LV_VENDOR_NAME          TYPE LFA1-NAME1.
DATA: LV_CONT_REF             TYPE EKKO-IHREZ.
DATA: LV_CONTRACT_NO          TYPE EKPO-EBELN.
DATA: LV_CONTRACT_ITEM        TYPE C LENGTH 30.
DATA: LV_CONTRACT_DESC        TYPE EKPO-TXZ01.
DATA: LV_TOTAL_CONTRACT_VALUE TYPE EKPO-NETWR.
DATA: LV_PROJECT_NO           TYPE EKPO-LGORT.
DATA: LV_PROJECT_NAME         TYPE T001L-LGOBE.
DATA: LV_SES_NO               TYPE ESSR-LBLNI.
DATA: LV_SES_DESC             TYPE ESSR-TXZ01.
DATA: LV_SES_DATE             TYPE ESSR-ERDAT.
DATA: RETENTION               TYPE EKKO-RETPC.
DATA: LV_RETENTION            TYPE SNETWR.
DATA: LV_TOTAL_AMOUNT         TYPE SNETWR.
DATA: LV_NET_AMOUNT           TYPE SNETWR.
DATA: LV_TOTAL_ACCOMP         TYPE SNETWR.
DATA: LV_NET_ACCOMP           TYPE SNETWR.
DATA: LV_RETENTION_ACCOMP     TYPE SNETWR.
DATA: MONTH_NAME TYPE C LENGTH 20.

DATA: PREV_SUB_PACKNO         TYPE ESLL-SUB_PACKNO.
DATA: PREV_PACKNO             TYPE ESSR-LBLNI.
DATA: TOTAL_VALUE             TYPE ESLL-NETWR.

DATA: IT_PREV_ESLL            TYPE TABLE OF ESLL,
      WA_PREV_ESLL            TYPE ESLL.
DATA: CURR_SUB_PACKNO         TYPE ESLL-SUB_PACKNO.
DATA: PREV_LBLNI              TYPE ESSR-LBLNI.
DATA: IT_CURR_ESLL            TYPE TABLE OF ESLL,
      WA_CURR_ESLL            TYPE ESLL.
DATA: IT_CURR_ESLL_TOT        TYPE TABLE OF ESLL,
      WA_CURR_ESLL_TOT        TYPE ESLL.
DATA: IT_ESSR                 TYPE TABLE OF ESSR,
      WA_ESSR                 TYPE ESSR.

DATA: IT_ESLL_ACCOMP_TEMP TYPE TABLE OF ESLL,
      IT_ESSR_ACCOMP      TYPE TABLE OF ESSR,
      IT_ESLL_ACCOMP      TYPE TABLE OF ESLL,
      WA_ESLL_ACCOMP      TYPE ESLL.


DATA: LT_OUTPUT_PO TYPE TABLE OF ZMM_SES_PO,
      LS_OUTPUT_PO LIKE LINE OF LT_OUTPUT_PO.
DATA: IT_OUTPUT  TYPE TABLE OF ZMM_SES,
      WA_OUTPUT  TYPE ZMM_SES.
DATA: IT_ALL_SERV  TYPE TABLE OF ZMM_SES,
      WA_ALL_SERV  TYPE ZMM_SES.
DATA: IT_PO_SERV  TYPE TABLE OF ZMM_SES,
      WA_PO_SERV  TYPE ZMM_SES.
DATA: IT_PO_SERV2  TYPE TABLE OF ZMM_SES,
      WA_PO_SERV2  TYPE ZMM_SES.
DATA: IT_OUTPUT2 TYPE TABLE OF T023T,
      WA_OUTPUT2 TYPE T023T.

DATA: LT_UNP TYPE TABLE OF ZMM_SES,
      LS_UNP TYPE ZMM_SES.

DATA: NUMBER TYPE INT1.
DATA: LT_ESLL_MG TYPE TABLE OF ESLL,
      LS_ESLL_MG TYPE ESLL.

DATA: BEGIN OF LT_EKKO2 OCCURS 0,
  EBELN TYPE BKPF-XBLNR,
  BUKRS TYPE EKKO-BUKRS,
END OF LT_EKKO2.
DATA: LS_EKKO2 LIKE LINE OF LT_EKKO2.

DATA: LT_EKPO TYPE TABLE OF EKPO,
      LS_EKPO TYPE EKPO.
DATA: LT_EKKO TYPE TABLE OF EKKO,
      LS_EKKO TYPE EKKO.
DATA: LT_PO_SES TYPE TABLE OF ESSR,
      LS_PO_SES TYPE ESSR.
DATA: LT_ESLH TYPE TABLE OF ESLH,
      LS_ESLH TYPE ESLH.
DATA: LT_ESLL_ALL_SERV TYPE TABLE OF ESLL,
      LS_ESLL_ALL_SERV TYPE ESLL.
DATA: LT_ESSR TYPE TABLE OF ESSR,
      LS_ESSR TYPE ESSR.
DATA: TEMP_ESSR TYPE TABLE OF ESSR WITH HEADER LINE.
DATA: LT_ESLL_TEMP TYPE TABLE OF ESLL,
      LS_ESLL_TEMP TYPE ESLL.
DATA: LT_ESLL TYPE TABLE OF ESLL,
      LS_ESLL TYPE ESLL.
DATA: LT_BKPF TYPE TABLE OF BKPF,
      LS_BKPF TYPE BKPF.
DATA: LT_BSEG TYPE TABLE OF BSEG,
      LS_BSEG TYPE BSEG.
DATA: LT_BSEG_K TYPE TABLE OF BSEG,
      LS_BSEG_K TYPE BSEG.
DATA: LT_BSEG_S TYPE TABLE OF BSEG,
      LS_BSEG_S TYPE BSEG.
DATA: LT_EKKN TYPE TABLE OF EKKN,
      LS_EKKN TYPE EKKN.
DATA: LT_AFVC TYPE TABLE OF AFVC,
      LS_AFVC TYPE AFVC.
DATA: LT_AUFK TYPE TABLE OF AUFK,
      LS_AUFK TYPE AUFK.
DATA: LT_LFA1 TYPE TABLE OF LFA1,
      LS_LFA1 TYPE LFA1.

DATA: LT_UNPLANNED_SRV LIKE WA_OUTPUT OCCURS 0,
      LS_UNPLANNED_SRV LIKE LINE OF LT_UNPLANNED_SRV.
DATA: LT_OUTPUT_SGROUP TYPE TABLE OF ZMM_SES_SGROUP,
      LS_OUTPUT_SGROUP LIKE LINE OF LT_OUTPUT_SGROUP.

DATA: LT_T023T TYPE TABLE OF T023T,
      LS_T023T TYPE T023T.

DATA: GT_CRDT_MEM TYPE TABLE OF ZMM_CRDT_MEM.
DATA: GS_CRDT_MEM LIKE LINE OF GT_CRDT_MEM.

DATA: BEGIN OF F4_EKPO OCCURS 0,
  EBELN TYPE EKPO-EBELN,
  EBELP TYPE EKPO-EBELP,
  END OF F4_EKPO.

DATA: F4_EKKO TYPE TABLE OF EKKO.

DATA: BEGIN OF F4_VENDOR OCCURS 0,
  LIFNR TYPE LFA1-LIFNR,
  NAME1 TYPE LFA1-NAME1,
  END OF F4_VENDOR.

DATA: ITEM_NO TYPE N LENGTH 2 VALUE 0.
DATA: DOC_NUM TYPE BSEG-BELNR.

DATA: TNAME   LIKE STXH-TDNAME,
      LTEXT   TYPE TABLE OF TLINE WITH HEADER LINE,
      OBJNR   LIKE STXH-TDNAME,
      PO_TXT  TYPE C LENGTH 2000.

DATA: $MSG TYPE C LENGTH 100.

DATA: LT_ZMM_SRV_UPLD TYPE TABLE OF ZMM_SRV_UPLD,
      LS_ZMM_SRV_UPLD TYPE ZMM_SRV_UPLD.

DATA: PO_UNIT_PRICE TYPE SBRTWR.

DATA: COUNTER TYPE N LENGTH 3.
DATA: SES_NOT_APPROVED TYPE C LENGTH 2000.

TABLES: ESSR,EKKO,EKPO.

SELECT-OPTIONS: S_EBELN FOR  EKKO-EBELN.
SELECT-OPTIONS: S_LIFNR FOR  EKKO-LIFNR NO INTERVALS.
PARAMETERS: P_LGORT TYPE EKPO-LGORT OBLIGATORY.






START-OF-SELECTION.

  IF SY-UNAME EQ 'B.HODHOD'.
    BREAK-POINT.
  ENDIF.

  "Check User Authorization
  AUTHORITY-CHECK OBJECT 'ZM_SLOC'
  ID 'ZPROJECT' FIELD P_LGORT.

  " Display Error Message if User Has No Authority
  IF SY-SUBRC <> 0.
    "Set Error Message
    CONCATENATE 'You are not authorized to print SLOC:' P_LGORT
      INTO $MSG SEPARATED BY SPACE.
    MESSAGE $MSG TYPE 'S' DISPLAY LIKE 'E'.
    LEAVE LIST-PROCESSING.
  ENDIF.




  "GET Project name" Motaz Naguib
  SELECT SINGLE LGOBE FROM T001L INTO LV_PROJECT_NAME WHERE LGORT = P_LGORT .

  SELECT *
    FROM EKKO
    INTO TABLE LT_EKKO
    WHERE EBELN IN S_EBELN
      AND LIFNR IN S_LIFNR
      AND BSART IN ('ZSCN','ZSER','ZSSO' )
      AND LOEKZ EQ ''.

  IF LT_EKKO[] IS NOT INITIAL.
    SELECT *
      FROM EKPO
      INTO TABLE LT_EKPO
      FOR ALL ENTRIES IN LT_EKKO
      WHERE EBELN EQ LT_EKKO-EBELN
        AND LGORT EQ P_LGORT
        AND LOEKZ EQ ''.

    SELECT
      LIFNR
      NAME1
      FROM LFA1
      INTO CORRESPONDING FIELDS OF TABLE LT_LFA1
      FOR ALL ENTRIES IN LT_EKKO
      WHERE LIFNR EQ LT_EKKO-LIFNR.
  ENDIF.

  IF LT_EKPO[] IS INITIAL.
    MESSAGE 'No data available' TYPE 'S' DISPLAY LIKE 'E'.
    LEAVE LIST-PROCESSING.
  ENDIF.


  IF LT_EKPO[] IS NOT INITIAL.

* Get All services on po items
    SELECT *
    FROM ESLH
    INTO TABLE LT_ESLH
    FOR ALL ENTRIES IN LT_EKPO
    WHERE EBELN EQ LT_EKPO-EBELN
      AND EBELP EQ LT_EKPO-EBELP
      AND DEL EQ ''.

    SELECT *
      FROM ESLL
      INTO TABLE LT_ESLL_ALL_SERV
      FOR ALL ENTRIES IN LT_ESLH
      WHERE PACKNO EQ LT_ESLH-PACKNO
        AND EXTROW NE ''
        AND DEL EQ ''.

    " Check ZTable for SES created before system used.
    " for same PO-Item, same service
    SELECT *
      FROM ZMM_SRV_UPLD
      INTO TABLE LT_ZMM_SRV_UPLD
      FOR ALL ENTRIES IN LT_EKPO
      WHERE EBELN  EQ LT_EKPO-EBELN
        AND EBELP  EQ LT_EKPO-EBELP.

* Get SES's on the PO item
    SELECT *
      FROM ESSR
      INTO TABLE LT_ESSR
      FOR ALL ENTRIES IN LT_EKPO
      WHERE EBELN EQ LT_EKPO-EBELN
        AND EBELP EQ LT_EKPO-EBELP
        AND LOEKZ EQ ''.
  ENDIF.
temp_essr[] = LT_ESSR .
SORT temp_essr ASCENDING by ebeln ebelp final .
DELETE temp_essr WHERE final EQ '' .
LOOP AT lt_ekpo INTO ls_ekpo.
READ TABLE temp_essr with KEY ebeln = ls_ekpo-ebeln ebelp = ls_ekpo-ebelp .
IF sy-subrc <> 0 .
delete lt_ekpo where ebeln = ls_ekpo-ebeln .
delete LT_EKKO where ebeln = ls_ekpo-ebeln .
delete LT_ESSR where ebeln = ls_ekpo-ebeln .
delete LT_ESLH where ebeln = ls_ekpo-ebeln .
ENDIF.
ENDLOOP.
IF  LT_ESSR is INITIAL .
 MESSAGE 'There is no final entry has been set' TYPE 'S' display like 'E'.
leave list-processing.
ENDIF.
  " Added 07/04/2016 By Bahaa Hodhod
***********************************

* Filter SES by approved SES only
  LOOP AT LT_ESSR INTO LS_ESSR.
    IF LS_ESSR-FRGRL EQ 'X' AND LS_ESSR-KZABN NE 'X'.
      ADD 1 TO COUNTER.
      IF COUNTER EQ 1.
        SES_NOT_APPROVED = LS_ESSR-LBLNI.
      ELSE.
        CONCATENATE SES_NOT_APPROVED ',' LS_ESSR-LBLNI INTO SES_NOT_APPROVED.
      ENDIF.
    ENDIF.
    CLEAR: LS_ESSR.
  ENDLOOP.

  IF SES_NOT_APPROVED IS NOT INITIAL.
    CONCATENATE 'Service Entry Sheets #: ' SES_NOT_APPROVED 'are not approved.'
    INTO SES_NOT_APPROVED SEPARATED BY SPACE.
    MESSAGE SES_NOT_APPROVED TYPE 'I'.
*    leave list-processing.
  ENDIF.

* delete SES not approved
  DELETE LT_ESSR WHERE FRGRL EQ 'X' AND KZABN NE 'X'.


* Get temp packages for SES'S selected
  IF LT_ESSR[] IS NOT INITIAL.
    SELECT
      PACKNO
      SUB_PACKNO
      FROM ESLL
      INTO CORRESPONDING FIELDS OF TABLE LT_ESLL_TEMP
      FOR ALL ENTRIES IN LT_ESSR
      WHERE PACKNO EQ LT_ESSR-PACKNO.
  ENDIF.

* Get SES line items
  IF LT_ESLL_TEMP[] IS NOT INITIAL.
    SELECT
      *
      FROM ESLL
      INTO TABLE LT_ESLL
      FOR ALL ENTRIES IN LT_ESLL_TEMP
      WHERE PACKNO EQ LT_ESLL_TEMP-SUB_PACKNO
        AND DEL EQ ''.
  ENDIF.


* Add services not processed to the table
  LOOP AT LT_ESLL_ALL_SERV INTO LS_ESLL_ALL_SERV.

    READ TABLE LT_ESLH INTO LS_ESLH
      WITH KEY PACKNO = LS_ESLL_ALL_SERV-PACKNO.

    WA_PO_SERV-EBELN      = LS_ESLH-EBELN.
    WA_PO_SERV-EBELP      = LS_ESLH-EBELP.
    WA_PO_SERV-PACKNO     = LS_ESLL_ALL_SERV-PACKNO.
    WA_PO_SERV-EXTROW     = LS_ESLL_ALL_SERV-EXTROW.
    WA_PO_SERV-SRVPOS     = LS_ESLL_ALL_SERV-SRVPOS.
    WA_PO_SERV-MEINS      = LS_ESLL_ALL_SERV-MEINS.
    WA_PO_SERV-TBTWR      = LS_ESLL_ALL_SERV-TBTWR.
    WA_PO_SERV-EXTSRVNO   = LS_ESLL_ALL_SERV-EXTSRVNO.
*    wa_po_serv-netwr  = ls_esll_all_serv-netwr.
    WA_PO_SERV-KTEXT1     = LS_ESLL_ALL_SERV-KTEXT1.
    WA_PO_SERV-MATKL      = LS_ESLL_ALL_SERV-MATKL.
    WA_PO_SERV-TOT_Q      = LS_ESLL_ALL_SERV-MENGE.
    SHIFT WA_PO_SERV-TOT_Q LEFT DELETING LEADING '0'.
    WA_PO_SERV-COMMENT     = LS_ESLL_ALL_SERV-USERF1_TXT.
    WA_PO_SERV-USERF2_TXT  = LS_ESLL_ALL_SERV-USERF2_TXT.

    APPEND WA_PO_SERV TO IT_PO_SERV.
    CLEAR: LS_ESLL_ALL_SERV,WA_PO_SERV.
  ENDLOOP.

  IT_PO_SERV2[] = IT_PO_SERV[].


  LOOP AT LT_ESSR INTO LS_ESSR.

    " Get Services on SES
    READ TABLE LT_ESLL_TEMP INTO LS_ESLL_TEMP
      WITH KEY PACKNO = LS_ESSR-PACKNO.

    LOOP AT LT_ESLL INTO LS_ESLL WHERE PACKNO = LS_ESLL_TEMP-SUB_PACKNO.

*     delete if the service is assigned to a SES
      READ TABLE IT_PO_SERV INTO WA_PO_SERV
        WITH KEY EBELN  = LS_ESSR-EBELN
                 EBELP  = LS_ESSR-EBELP
                 SRVPOS = LS_ESLL-SRVPOS.
      IF SY-SUBRC EQ 0.
        DELETE IT_PO_SERV WHERE EBELN  = LS_ESSR-EBELN
          AND EBELP  = LS_ESSR-EBELP
          AND SRVPOS = LS_ESLL-SRVPOS.
      ENDIF.

      WA_OUTPUT-EBELN       = LS_ESSR-EBELN.
      WA_OUTPUT-EBELP       = LS_ESSR-EBELP.
      WA_OUTPUT-PACKNO      = LS_ESSR-PACKNO.
      WA_OUTPUT-SUB_PACKNO  = LS_ESLL_TEMP-SUB_PACKNO.
      WA_OUTPUT-EXTROW      = LS_ESLL-EXTROW.
      WA_OUTPUT-SRVPOS      = LS_ESLL-SRVPOS.
      WA_OUTPUT-MATKL       = LS_ESLL-MATKL.
      WA_OUTPUT-MEINS       = LS_ESLL-MEINS.
      WA_OUTPUT-TBTWR       = LS_ESLL-TBTWR.
      WA_OUTPUT-NETWR       = LS_ESLL-NETWR.
      WA_OUTPUT-KTEXT1      = LS_ESLL-KTEXT1.
      WA_OUTPUT-USERF2_TXT  = LS_ESLL-USERF2_TXT.
      WA_OUTPUT-COMMENT     = LS_ESLL-USERF1_TXT.
      WA_OUTPUT-EXTSRVNO    = LS_ESLL-EXTSRVNO.

      WA_OUTPUT-TOT_PT      = LS_ESLL-USERF2_NUM.
      IF LS_ESLL-SRVPOS IS INITIAL.
        WA_OUTPUT-TOT_Q       = LS_ESLL-MENGE.
      ELSE.
        WA_OUTPUT-TOT_Q       = LS_ESLL-USERF1_NUM.
      ENDIF.
      SHIFT WA_OUTPUT-TOT_Q LEFT DELETING LEADING '0'.
      SHIFT WA_OUTPUT-TOT_Q LEFT DELETING LEADING SPACE.
*        wa_output-total_value =
*       ( wa_output-tot_q * wa_output-tbtwr * ls_esll-userf2_num ) / 100.

      APPEND WA_OUTPUT TO IT_OUTPUT.
      CLEAR: WA_OUTPUT,LS_ESLL.
    ENDLOOP.

    CLEAR: LS_ESLL_TEMP,LS_ESSR.
  ENDLOOP.

  APPEND LINES OF IT_PO_SERV TO IT_OUTPUT.


* Move unplanned services to table
  LOOP AT IT_OUTPUT INTO WA_OUTPUT WHERE SRVPOS IS INITIAL.
    MOVE-CORRESPONDING WA_OUTPUT TO LS_UNP.

    "Calculate total value for unplanned services
    LS_UNP-TOTAL_VALUE = WA_OUTPUT-TOT_Q * WA_OUTPUT-TBTWR.

    " Material group desc
    LS_UNP-MATKL = 'ZUNP'.

    READ TABLE LT_EKPO INTO LS_EKPO
      WITH KEY EBELN  = WA_OUTPUT-EBELN
               EBELP  = WA_OUTPUT-EBELP.
*    ls_unp-txz01       = ls_ekpo-txz01.
    LS_UNP-ITEM_DESC       = LS_EKPO-TXZ01.

    APPEND LS_UNP TO LT_UNP.
    CLEAR: WA_OUTPUT,LS_UNP,LS_EKPO.
  ENDLOOP.

  IT_ALL_SERV[] = IT_OUTPUT[].

* Delete repeted service on the same PO-item, keep only last recent service line
  SORT IT_OUTPUT DESCENDING BY EBELN EBELP SRVPOS SUB_PACKNO EXTROW.
  DELETE IT_OUTPUT WHERE SRVPOS IS INITIAL.
  DELETE ADJACENT DUPLICATES FROM IT_OUTPUT COMPARING EBELN EBELP SRVPOS.


  LOOP AT IT_OUTPUT INTO WA_OUTPUT.

    READ TABLE LT_EKPO INTO LS_EKPO
      WITH KEY EBELN = WA_OUTPUT-EBELN
               EBELP = WA_OUTPUT-EBELP.
    WA_OUTPUT-ITEM_DESC       = LS_EKPO-TXZ01.

    LOOP AT IT_ALL_SERV INTO WA_ALL_SERV
      WHERE EBELN  EQ WA_OUTPUT-EBELN
        AND EBELP  EQ WA_OUTPUT-EBELP
        AND SRVPOS EQ WA_OUTPUT-SRVPOS.

      WA_OUTPUT-TOTAL_VALUE = WA_OUTPUT-TOTAL_VALUE + WA_ALL_SERV-NETWR.

      IF WA_OUTPUT-COLOR_IND1 IS INITIAL.
        IF WA_ALL_SERV-EXTSRVNO IS NOT INITIAL.
          WA_OUTPUT-COLOR_IND1 = 'X'.
        ENDIF.
      ENDIF.

      IF WA_OUTPUT-COLOR_IND1 IS INITIAL.
        READ TABLE IT_PO_SERV2 INTO WA_PO_SERV2
          WITH KEY EBELN  = WA_ALL_SERV-EBELN
                   EBELP  = WA_ALL_SERV-EBELP
                   SRVPOS = WA_ALL_SERV-SRVPOS.
        IF WA_PO_SERV2-TBTWR NE WA_ALL_SERV-TBTWR.
          WA_OUTPUT-COLOR_IND1 = 'X'.
        ENDIF.
      ENDIF.

      CLEAR: WA_ALL_SERV,WA_PO_SERV2,LS_EKPO.
    ENDLOOP.

    " Add previous SES's service amount exist before creating system.
    READ TABLE LT_ZMM_SRV_UPLD INTO LS_ZMM_SRV_UPLD
      WITH KEY EBELN  = WA_OUTPUT-EBELN
               EBELP  = WA_OUTPUT-EBELP
               SRVPOS = WA_OUTPUT-SRVPOS.
    IF SY-SUBRC EQ 0.

      " if service found only in ZTABLE but not incuded in any SES
      " then assign 'percentage and Qauntity' from ZTABLE
      READ TABLE IT_PO_SERV INTO WA_PO_SERV
      WITH KEY EBELN  = WA_OUTPUT-EBELN
               EBELP  = WA_OUTPUT-EBELP
               SRVPOS = WA_OUTPUT-SRVPOS.
      IF SY-SUBRC EQ 0. " Service not included in any SES (didnt deleted: line => 362)
        WA_OUTPUT-TOT_Q   = LS_ZMM_SRV_UPLD-USERF1_NUM.
        WA_OUTPUT-TOT_PT  = LS_ZMM_SRV_UPLD-USERF2_NUM.
      ENDIF.

      " Get service unit price from PO (Not from SES), use it to calculate previous SES's exist in ZTable
      LOOP AT LT_ESLH INTO LS_ESLH
        WHERE EBELN EQ WA_OUTPUT-EBELN
          AND EBELP EQ WA_OUTPUT-EBELP.
        READ TABLE LT_ESLL_ALL_SERV INTO LS_ESLL_ALL_SERV
          WITH KEY PACKNO = LS_ESLH-PACKNO
                   SRVPOS = WA_OUTPUT-SRVPOS.
        PO_UNIT_PRICE = LS_ESLL_ALL_SERV-TBTWR.

        IF PO_UNIT_PRICE IS NOT INITIAL.
          CLEAR: LS_ESLH,LS_ESLL_ALL_SERV.
          EXIT.
        ENDIF.
        CLEAR: LS_ESLH,LS_ESLL_ALL_SERV.
      ENDLOOP.
      WA_OUTPUT-TOTAL_VALUE =
        WA_OUTPUT-TOTAL_VALUE + ( PO_UNIT_PRICE * LS_ZMM_SRV_UPLD-USERF1_NUM * ( LS_ZMM_SRV_UPLD-USERF2_NUM / 100 ) ).
    ENDIF.

    MODIFY IT_OUTPUT FROM WA_OUTPUT.
    CLEAR: WA_OUTPUT,PO_UNIT_PRICE.
  ENDLOOP.


* Append unplanned services
  APPEND LINES OF LT_UNP TO IT_OUTPUT.

* Fill table service groups attached on PO
  MOVE-CORRESPONDING IT_OUTPUT[] TO LT_OUTPUT_SGROUP[].
  SORT LT_OUTPUT_SGROUP BY EBELN MATKL.
  DELETE ADJACENT DUPLICATES FROM LT_OUTPUT_SGROUP
    COMPARING EBELN MATKL.

* Get Service groups related to PO
  SELECT
    MATKL
    WGBEZ60
    FROM T023T
    INTO CORRESPONDING FIELDS OF TABLE LT_T023T
    FOR ALL ENTRIES IN LT_OUTPUT_SGROUP
      WHERE MATKL EQ LT_OUTPUT_SGROUP-MATKL.

  LOOP AT LT_OUTPUT_SGROUP INTO LS_OUTPUT_SGROUP.

    IF LS_OUTPUT_SGROUP-MATKL EQ 'ZUNP'.
      LS_OUTPUT_SGROUP-WGBEZ60 = 'أعمال غير مخططة'.
    ELSE.
      READ TABLE LT_T023T INTO LS_T023T
        WITH KEY MATKL = LS_OUTPUT_SGROUP-MATKL.
      LS_OUTPUT_SGROUP-WGBEZ60 = LS_T023T-WGBEZ60.
    ENDIF.

    MODIFY LT_OUTPUT_SGROUP FROM LS_OUTPUT_SGROUP.
    CLEAR: LS_OUTPUT_SGROUP,LS_T023T.
  ENDLOOP.

  IF IT_OUTPUT[] IS INITIAL.
    MESSAGE 'No data available' TYPE 'S' DISPLAY LIKE 'E'.
    LEAVE LIST-PROCESSING.
  ENDIF.


* Get credit memo for the selected PO
  MOVE-CORRESPONDING LT_EKPO[] TO LT_EKKO2[].
  SORT LT_EKKO2 ASCENDING BY EBELN.
  DELETE ADJACENT DUPLICATES FROM LT_EKKO2 COMPARING EBELN.

  SELECT *
    FROM BKPF
    INTO TABLE LT_BKPF
    FOR ALL ENTRIES IN LT_EKKO2
    WHERE XBLNR EQ LT_EKKO2-EBELN
      AND BUKRS EQ LT_EKKO2-BUKRS
      AND BLART EQ 'KG'.

  IF LT_BKPF[] IS NOT INITIAL .
    SELECT
      BELNR
      SHKZG
      WRBTR
      SGTXT
      KOART
      NPLNR
      AUFPL
      APLZL
    FROM BSEG
    INTO CORRESPONDING FIELDS OF TABLE LT_BSEG
    FOR ALL ENTRIES IN LT_BKPF
    WHERE BUKRS EQ LT_BKPF-BUKRS
      AND GJAHR EQ LT_BKPF-GJAHR
      AND BELNR EQ LT_BKPF-BELNR
      AND KOART EQ 'S'
      AND NPLNR NE ''.
  ENDIF.

  IF LT_BSEG[] IS NOT INITIAL.
    SELECT
      NPLNR
      AUFPL
      APLZL
      FROM EKKN
      INTO CORRESPONDING FIELDS OF TABLE LT_EKKN
      FOR ALL ENTRIES IN LT_BSEG
      WHERE NPLNR EQ LT_BSEG-NPLNR.
  ENDIF.

  IF LT_EKKN[] IS NOT INITIAL.
    " Activity desc
    SELECT
      AUFPL
      APLZL
      LTXA1
      FROM AFVC
      INTO CORRESPONDING FIELDS OF TABLE LT_AFVC
      FOR ALL ENTRIES IN LT_EKKN
      WHERE AUFPL EQ LT_EKKN-AUFPL
        AND APLZL EQ LT_EKKN-APLZL.
    " Network desc
    SELECT
      AUFNR
      KTEXT
      FROM AUFK
      INTO CORRESPONDING FIELDS OF TABLE LT_AUFK
      FOR ALL ENTRIES IN LT_EKKN
      WHERE AUFNR EQ LT_EKKN-NPLNR.
  ENDIF.

  LOOP AT LT_BSEG INTO LS_BSEG.

    IF DOC_NUM = LS_BSEG-BELNR.
      ADD 1 TO ITEM_NO.
      GS_CRDT_MEM-ITEM_NO = ITEM_NO.
    ELSE.
      ITEM_NO = 1.
      GS_CRDT_MEM-ITEM_NO = ITEM_NO.
    ENDIF.

    SHIFT GS_CRDT_MEM-ITEM_NO LEFT DELETING LEADING '0'.
    SHIFT GS_CRDT_MEM-ITEM_NO LEFT DELETING LEADING SPACE.

    GS_CRDT_MEM-NPLNR = LS_BSEG-NPLNR.
    GS_CRDT_MEM-APLZL = LS_BSEG-APLZL.
    GS_CRDT_MEM-SGTXT = LS_BSEG-SGTXT.
    GS_CRDT_MEM-WRBTR = LS_BSEG-WRBTR.

    READ TABLE LT_BKPF INTO LS_BKPF
      WITH KEY BELNR = LS_BSEG-BELNR.
    GS_CRDT_MEM-BELNR = LS_BKPF-BELNR.
    GS_CRDT_MEM-BUDAT = LS_BKPF-BUDAT.
    GS_CRDT_MEM-WAERS = LS_BKPF-WAERS.

    READ TABLE LT_EKKO2 INTO LS_EKKO2
      WITH KEY EBELN = LS_BKPF-XBLNR.
    GS_CRDT_MEM-EBELN = LS_EKKO2-EBELN.

    READ TABLE LT_AUFK INTO LS_AUFK
      WITH KEY AUFNR = LS_BSEG-NPLNR.
    READ TABLE LT_EKKN INTO LS_EKKN
      WITH KEY NPLNR = LS_BSEG-NPLNR
               APLZL = LS_BSEG-APLZL.
    READ TABLE LT_AFVC INTO LS_AFVC
      WITH KEY AUFPL = LS_EKKN-AUFPL
               APLZL = LS_EKKN-APLZL.
    CONCATENATE LS_AUFK-KTEXT '/' LS_AFVC-LTXA1
      INTO GS_CRDT_MEM-NET_ACT_DESC SEPARATED BY SPACE.
    SHIFT GS_CRDT_MEM-NET_ACT_DESC LEFT DELETING LEADING SPACE.

    SHIFT GS_CRDT_MEM-NPLNR LEFT DELETING LEADING '0'.
    SHIFT GS_CRDT_MEM-APLZL LEFT DELETING LEADING '0'.
    CONCATENATE GS_CRDT_MEM-NPLNR '/' GS_CRDT_MEM-APLZL
                INTO GS_CRDT_MEM-NETWORK_ACTIVITY
                SEPARATED BY SPACE.
    SHIFT GS_CRDT_MEM-NETWORK_ACTIVITY LEFT DELETING LEADING SPACE.

    DOC_NUM = LS_BSEG-BELNR.

    APPEND GS_CRDT_MEM TO GT_CRDT_MEM.
    CLEAR: LS_BKPF,LS_BSEG,LS_EKKN,LS_AFVC,LS_AUFK.
  ENDLOOP.



  LOOP AT LT_EKKO INTO LS_EKKO.

    READ TABLE LT_EKKO2 INTO LS_EKKO2
      WITH KEY EBELN = LS_EKKO-EBELN.

    IF SY-SUBRC EQ 0.

      LS_OUTPUT_PO-CONTRACT_NO = LS_EKKO-EBELN.
      LS_OUTPUT_PO-VENDOR_NO   = LS_EKKO-LIFNR.

      READ TABLE LT_LFA1 INTO LS_LFA1
        WITH KEY LIFNR = LS_EKKO-LIFNR.
      LS_OUTPUT_PO-VENDOR_NAME  = LS_LFA1-NAME1.

      LOOP AT LT_EKPO INTO LS_EKPO WHERE EBELN EQ LS_EKKO-EBELN.

        ADD LS_EKPO-NETWR TO LS_OUTPUT_PO-TOTAL_CONTRACT_VALUE.

        IF LS_OUTPUT_PO-CONTRACT_DESC IS INITIAL.
          LS_OUTPUT_PO-CONTRACT_DESC = LS_EKPO-IDNLF.
        ENDIF.
        CLEAR: LS_EKPO,LS_OUTPUT_SGROUP.
      ENDLOOP.

      LOOP AT IT_OUTPUT INTO WA_OUTPUT WHERE EBELN EQ LS_EKKO-EBELN.
        ADD WA_OUTPUT-TOTAL_VALUE TO LS_OUTPUT_PO-TOTAL_AMOUNT.
        CLEAR: WA_OUTPUT.
      ENDLOOP.

* Retention & Net amount
      RETENTION     = LS_EKKO-RETPC / 100.
      LS_OUTPUT_PO-RETENTION  = ( LS_OUTPUT_PO-TOTAL_AMOUNT ) * RETENTION.
      LS_OUTPUT_PO-NET_AMOUNT = LS_OUTPUT_PO-TOTAL_AMOUNT - LS_OUTPUT_PO-RETENTION.

      APPEND LS_OUTPUT_PO TO LT_OUTPUT_PO.
    ENDIF.
    CLEAR: LS_EKKO,LS_OUTPUT_PO,LS_OUTPUT_SGROUP.
  ENDLOOP.



  SORT LT_OUTPUT_PO ASCENDING BY CONTRACT_NO.
  DELETE LT_OUTPUT_PO WHERE TOTAL_CONTRACT_VALUE EQ 0.
  SORT LT_OUTPUT_SGROUP ASCENDING BY EBELN MATKL.
  SORT IT_OUTPUT ASCENDING BY EBELN MATKL SRVPOS.



  FP_OUTPUTPARAMS-PREVIEW   = ABAP_TRUE.
  FP_OUTPUTPARAMS-NODIALOG  = ABAP_TRUE.
  fp_outputparams-dest      = 'LP01'.


  CALL FUNCTION 'FP_FUNCTION_MODULE_NAME'
    EXPORTING
      I_NAME     = 'ZMM_SES_FIN_FM' "'ZMM_SES_FIN_FM_TEST'
    IMPORTING
      E_FUNCNAME = FM_NAME.


  CALL FUNCTION 'FP_JOB_OPEN'
    CHANGING
      IE_OUTPUTPARAMS = FP_OUTPUTPARAMS
    EXCEPTIONS
      CANCEL          = 1
      USAGE_ERROR     = 2
      SYSTEM_ERROR    = 3
      INTERNAL_ERROR  = 4
      OTHERS          = 5.


  CALL FUNCTION FM_NAME
    EXPORTING
      /1BCDWB/DOCPARAMS    = FP_DOCPARAMS
      ITAB                 = IT_OUTPUT
      ITAB2                = LT_OUTPUT_SGROUP
      ITAB3                = GT_CRDT_MEM
      IT_PO                = LT_OUTPUT_PO
      VENDOR_NO            = LV_VENDOR_NO
      VENDOR_NAME          = LV_VENDOR_NAME
      CONTRACT_REF         = LV_CONT_REF
      CONTRACT_NO          = LV_CONTRACT_NO
      CONTRACT_ITEM        = LV_CONTRACT_ITEM
      CONTRACT_DESC        = LV_CONTRACT_DESC
      TOTAL_CONTRACT_VALUE = LV_TOTAL_CONTRACT_VALUE
      PROJECT_NO           = LV_PROJECT_NO
      PROJECT_NAME         = LV_PROJECT_NAME
      SES_NO               = LV_SES_NO
      SES_DESC             = LV_SES_DESC
      SES_DATE             = LV_SES_DATE
      RETENTION            = LV_RETENTION
      TOTAL_AMOUNT         = LV_TOTAL_AMOUNT
      NET_AMOUNT           = LV_NET_AMOUNT
      TOTAL_ACCOMP         = LV_TOTAL_ACCOMP
      NET_ACCOMP           = LV_NET_ACCOMP
      RETENTION_ACCOMP     = LV_RETENTION_ACCOMP
      MONTH_NAME           = MONTH_NAME
**      p_lgort              = p_lgort   "Motaz"
*     ZZXSTRING            = W_BINARY
*     ZZSTRING             = W_BASE
*    IMPORTING
*     /1BCDWB/FORMOUTPUT   =
    EXCEPTIONS
      USAGE_ERROR          = 1
      SYSTEM_ERROR         = 2
      INTERNAL_ERROR       = 3.


  CALL FUNCTION 'FP_JOB_CLOSE'
*    IMPORTING
*     E_RESULT        =
    EXCEPTIONS
      USAGE_ERROR    = 1
      SYSTEM_ERROR   = 2
      INTERNAL_ERROR = 3
      OTHERS         = 4.
